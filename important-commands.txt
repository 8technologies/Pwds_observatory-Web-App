lsphp artisan make:component Alert --inline

php artisan migrate

php artisan make:migration add_process_cates --table=people


php artisan make:migration create_courses_table
php artisan make:migration create_course_categories_table
php artisan make:migration create_course_chapters_table
php artisan make:migration create_course_topics_table
php artisan make:migration create_participants_table
php artisan make:migration create_post_categories_table
php artisan make:migration create_news_posts_table
php artisan make:migration create_eevnts_table
php artisan make:migration create_event_bookings_table
php artisan make:migration create_event_tickets_table
php artisan make:migration create_event_speakers_table
php artisan make:migration create_jobs_table
php artisan make:migration create_admin_roles_table
php artisan make:migration create_service_providers_table 
php artisan make:migration create_associations_table 
php artisan make:migration create_groups_table 
php artisan make:migration create_people_table 
php artisan make:migration create_disabilities_table 
php artisan make:migration create_institutions_table 
php artisan make:migration create_counselling_centres_table 
php artisan make:migration create_counselling_centres_table 
php artisan make:migration create_job_applications_table 
php artisan make:migration create_products_table 
php artisan make:migration create_product_orders_table 

Encore\Admin\Auth\Database\Administrator::class,
php artisan admin:make FormSr4Controller --model=App\FormSr4
php artisan admin:make ParticipantController --model=App\\Participant

php artisan admin:controller --model=App\FormSr4
php artisan admin:make FormSr4Controller --model=App\FormSr4

 
php artisan admin:make CourseController --model=App\\Models\\Course
php artisan admin:make ParticipantController --model=App\\Models\\Participant
php artisan admin:make MembersController --model=App\Models\User
php artisan admin:make PostCategoryController --model=App\Models\PostCategory
php artisan admin:make NewsPostController --model=App\Models\NewsPost
php artisan admin:make EventController --model=App\Models\Event
php artisan admin:make EventBookingController --model=App\Models\EventBooking
php artisan admin:make ServiceProviderController --model=App\Models\ServiceProvider
php artisan admin:make AssociationController --model=App\Models\Association
php artisan admin:make GroupController --model=App\Models\Group
php artisan admin:make PersonController --model=App\Models\Person
php artisan admin:make DisabilityController --model=App\Models\Disability
php artisan admin:make InstitutionController --model=App\Models\Institution
php artisan admin:make CounsellingCentreController --model=App\Models\CounsellingCentre
php artisan admin:make JobController --model=App\Models\Job
php artisan admin:make JobApplicationController --model=App\Models\JobApplication
php artisan admin:make ProductController --model=App\Models\Product
php artisan admin:make ProductOrderController --model=App\Models\ProductOrder

php artisan make:factory TeacherFactory


php artisan make:model MyClass
php artisan make:model Student
php artisan make:model Teacher
php artisan make:model Subject
php artisan make:model Exam
php artisan make:model GeneralExam
php artisan make:model CourseCategory
php artisan make:model Course
php artisan make:model CourseChapter
php artisan make:model CourseTopic
php artisan make:model Utils
php artisan make:model TrafficRecord
php artisan make:model Participant
php artisan make:model Campus
php artisan make:model UserHasProgram
php artisan make:model Users
php artisan make:model User
php artisan make:model PostCategory
php artisan make:model NewsPost
php artisan make:model Event
php artisan make:model EventTicket
php artisan make:model EventBooking
php artisan make:model EventSpeaker
php artisan make:model AdminRoleUser
php artisan make:model ServiceProvider
php artisan make:model Association
php artisan make:model Group
php artisan make:model Person
php artisan make:model Disability
php artisan make:model Institution
php artisan make:model CounsellingCentre
php artisan make:model Job
php artisan make:model JobApplication
php artisan make:model Product
php artisan make:model ProductOrder

->photo      



ethnicity
religion
birth_hospital
languages
dob
sex
marital_status         
district_of_origin
place_of_birth            
birth_no_hospital_description
disabilities
 



//Ogiki Moses Odera
php artisan make:seed DuAgentRoleAndPermissionSeeder
php artisan db:seed --class=DuAgentRoleAndPermissionSeeder
php artisan admin:make AgentController --model=App\Models\User
$router->resource('du-agents', AgentController::class);

php artisan make:mail DuAgentCreated --markdown=emails.du_agent_created


 // Ogiki Moses Odera 


 php artisan admin:make DataImportController --model=App\Models\DataImport

 php artisan make:model DataImport  -m 

 php artisan admin:make Report_2Controller --model=App\Models\Report

 php artisan make:migration add_column_district_union_to_table_name --table=data_imports


Ogiki Moses
How to migrate to online database 

Route::get('migrate', function () { 
    Artisan::call('migrate', ['--force' => true]); 
    return Artisan::output();
});

How to seed to online database 

Route::get('seed', function() {
    Artisan::call('db:seed', [
      '--class' => 'DuAgentRoleAndPermissionSeeder',
      '--force' => true, // if in production
    ]);
    return 'Seeder executed.';
})->middleware('auth:admin');





// OLD CODES STYLES
//resources\views\widgets\box-5.blade.php
<?php

$title     = $title     ?? 'Title';
$style     = $style     ?? 'success';
$number    = $number    ?? '0.00';
$sub_title = $sub_title ?? 'Sub-titles';
$link      = $link      ?? 'javascript:;';

$is_dark = isset($is_dark) ? (bool)$is_dark : true;

$bg     = $is_dark ? 'bg-primary' : '';
$text   = $is_dark ? 'text-white' : 'text-primary';
$text2  = $is_dark ? 'text-white' : 'text-dark';
$border = $is_dark ? 'border-primary' : 'border-primary';

if ($style === 'danger') {
    $text   = 'text-white';
    $bg     = 'bg-danger';
    $text2  = 'text-white';
    $border = 'border-danger';
}

$ariaLabel = "{$title}: {$number} {$sub_title}.";

?>

<a href="{{ $link }}"
   class="card {{ $bg }} {{ $border }} mb-4 mb-md-5"
   aria-label="{{ $ariaLabel }}">
    <div class="card-body py-0">

        {{-- Title with 2-line clamp --}}
        <p class="h3 text-bold mb-2 mb-md-3 {{ $text }}"
           style="
               display: -webkit-box;
               -webkit-line-clamp: 2;
               -webkit-box-orient: vertical;
               overflow: hidden;
               text-overflow: ellipsis;
               line-height: 1.4em;
               max-height: 2.8em;
           ">
            {{ $title }}
        </p>

        {{-- Number --}}
        <p class="m-0 text-right {{ $text2 }} h3" style="line-height: 3.2rem;">
            {{ $number }}
        </p>

        {{-- Subtitle --}}
        <p class="mt-4 {{ $text2 }}">
            {{ $sub_title }}
        </p>
    </div>
</a>





//resources\views\dashboard\disability-category-count.blade.php

<div class="card text-center" id="card-element">
    <div class="card-body" id="body-element">
        <h5 class="card-text text-center">Count Of Persons With Disabilities by Disability Category</h5>
        <label for="districtSelect">
            <select name="districtSelector" id="districtSelector" onchange="UpdateCategory()" class="form-select">
                <option value="all">All Districts</option>
                @foreach ($districtDisabilityCounts as $districtName => $counts)
                    <option value="{{ $districtName }}">{{ $districtName }}</option>
                @endforeach
            </select>
        </label>
        <label for="disabilityCountFilter">
            <select name="disabilityCountFilter" id="disabilityCountFilter" onchange="UpdateCategory()" class="form-select">
                <option value="all">All Disabilities</option>
                 <option value="5" selected>Top 5 Disabilities</option>
                <option value="2">Top 2 Disabilities</option> 
            </select>
        </label>
        <div class="chart-container">
            <canvas id="disabilityCountChart"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const disabilityData = @json($disabilityCounts);
    var ctx = document.getElementById('disabilityCountChart').getContext('2d');
    var initialData = {
        labels: Object.keys(disabilityData),
        datasets: [{
            label: 'Number of Persons by Disability Category',
            data: Object.values(disabilityData), //Retrieving values from json object
            backgroundColor: 'green', // background color
            borderColor: 'green',
            borderWidth: 1
        }]
    };
    const disabilityChart = new Chart(ctx, {
        type: 'bar',
        data: initialData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    type: 'logarithmic',
                    ticks: {
                        callback: function(value, index, values) {
                            if (value === 10 || value === 100 || value === 1000 || value === 10000) {
                                return value.toString();
                            }
                        }
                    }
                },
                x: {
                    ticks: {
                        autoSkip: false,
                        fontSize: 8,
                        minRotation: 45,
                        maxRotation: 40
                    }
                }
            }
        },
    });

    function UpdateCategory() {
    var selectedDistrictCategory = document.getElementById('districtSelector').value;
    var disabilityFilter = document.getElementById('disabilityCountFilter').value;
    
    let filteredData;
    if (selectedDistrictCategory === 'all') {
        filteredData = disabilityData;
    } else {
        const districtData = @json($districtDisabilityCounts);
        filteredData = districtData[selectedDistrictCategory];
    }

    // Apply filter for top 5 or top 2 if selected
    let labels = Object.keys(filteredData);
    let data = Object.values(filteredData);
    if (disabilityFilter === '5') {
        labels = labels.slice(0, 5);
        data = data.slice(0, 5);
    } else if (disabilityFilter === '2') {
        labels = labels.slice(0, 2);
        data = data.slice(0, 2);
    }

    // Update the chart
    disabilityChart.data.labels = labels;
    disabilityChart.data.datasets[0].data = data;
    disabilityChart.update();
}

 UpdateCategory();
</script>

//Original register blade

@extends('layouts.base-layout')
{{-- account-details --}}
@section('base-content')
    <?php
    $header_data['header_style'] = 2;
    
    ?>

    <body>
        <main class="page-wrapper">

            @include('layouts.header', $header_data)

            <!-- Page content -->
            <section class="position-relative h-100 pt-5 pb-4">

                <!-- Sign up form -->
                <div class="container d-flex flex-wrap justify-content-center justify-content-xl-start h-100 pt-5">

                    <div class="w-100 align-self-end pt-1 pt-md-4 pb-4" style="max-width: 526px;">
                        <h1 class="text-center text-xl-start">Register</h1>

                        <p class="lead fs-sm text-dark mt-3 border border-primary p-3 bg-secondary rounded">
                            Dear respected visitor, thank you for your interest in the ICT for Persons With Disabilities. We
                            are seeking to create an national database for for Persons With Disabilities to enhance ways of
                            reaching out and supporting.
                            Please fill out this form to help us get to know you better.
                        </p>
                        <p class="text-center text-xl-start pb-3 mb-3">Already registred an account? <a href="login">Login
                                in here</a></p>
                        <form class="needs-validation" method="POST" action="{{ url('account-activation') }}" novalidate>
                            <input type="hidden" name="_token" value="{{ csrf_token() }}">
                            <div class="row">
                                <div class="col-sm-6 mb-3">
                                    @include('components.input-text', [
                                        'name' => 'name',
                                        'label' => 'Full name',
                                    ])
                                </div>
                                <div class="col-sm-6 mb-3">
                                    @include('components.input-text', [
                                        'name' => 'email',
                                        'type' => 'email',
                                        'label' => 'Email address',
                                    ])
                                </div>
                                <div class="col-12 mb-3">

                                    @include('components.input-text', [
                                        'name' => 'password',
                                        'type' => 'password',
                                        'label' => 'Password',
                                    ])

                                </div>
                                <div class="col-12 mb-4">

                                    @include('components.input-text', [
                                        'name' => 'password_1',
                                        'type' => 'password',
                                        'label' => 'Confirm password',
                                    ])
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign up</button>
                        </form>
                    </div>


                    <div class="w-100 align-self-end pt-0 parallax mx-auto d-none d-md-block" style="max-width: 600px;">
                        <!-- Parallax gfx -->
                        <div class="parallax-layer" data-depth="0.1">
                            <img src="assets/img/landing/online-courses/hero/layer01.png" alt="Layer">
                        </div>
                        <div class="parallax-layer" data-depth="0.13">
                            <img src="assets/img/landing/online-courses/hero/layer02.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-5" data-depth="-0.12">
                            <img src="assets/img/landing/online-courses/hero/layer03.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-3" data-depth="0.27">
                            <img src="assets/img/landing/online-courses/hero/layer04.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-1" data-depth="-0.18">
                            <img src="assets/img/landing/online-courses/hero/layer05.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-1" data-depth="0.1">
                            <img src="assets/img/landing/online-courses/hero/layer06.png" alt="Layer">
                        </div>
                    </div>
                </div>



            </section>
        </main>
    @endsection


//AccountController
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Facades\Admin;
use Illuminate\Http\Request;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
//use Illuminate\Support\Facades\Hash;

class AccountController extends BaseController
{

    public function register()
    {
        if (Auth::guard()->check()) {
            return redirect("/dashboard");
        }
        return view('register');
    }
    public function login(Request $request)
    {
        // $password = '1234';
        // $hashedPassword = Hash::make($password);
        // dd($hashedPassword);
        // die();
        if (Auth::guard()->check()) {
            // User is already logged in
            $user = Auth::user();
            if ($user->isRole('district-union')) {
                return redirect("/du-dashboard");
            } elseif ($user->isRole('opd')) {
                return redirect("/opd-dashboard");
            } elseif ($user->isRole('administrator') || $user->isRole('NUDIPU')) {
                return redirect("/dashboard");
            } elseif ($user->isRole('pwd') || $user->isRole('basic')) {
                return redirect("/pwd-dashboard");
            }
        }
        return view('login');
    }

    public function activateAccount(Request $request)
    {
        $existingUser = User::where('email', $request->email)->first();

        if ($existingUser) {
            // Return an error view or message if the email is already in use
            return 'The email address is already in use.';
        }
        //Else creat new account.
        $user = new User;
        $user->name = $request->name;
        $user->email = $request->email;
        $user->username = $request->email;
        $user->password = bcrypt($request->password);
        $user->save();

        $activation_token = Str::random(60);  // Generate a random token
        $user->activation_token = $activation_token; // Assuming you have this column in your users table
        $user->save();

        $user->sendActivationEmail($activation_token);

        return view('emails.approval_notification');


    }

    public function activate(Request $request)
    {
        $email = $request->query('email');
        $token = $request->query('token');

        $user = User::where('email', $email)->where('activation_token', $token)->first();

        if ($user) {
            $user->activation_token = null; // Clear the activation token
            // $user->email_verified_at = now();
            $user->approved = 1; // Mark email as verified
            $user->save();

            return view('activation-success'); // Or redirect to a login page with a success message
        } else {
            return view('activation-failed'); // Or redirect to an error page
        }
    }


    public function account_details()
    {
        $_SESSION['form'] = Auth::user();
        return view('account-details');
    }

    public function dashboard()
    {
        return view('account-dashboard');
    }

    public function logout()
    {
        Auth::logout();
        return redirect('/');
    }

    public function login_post(Request $r)
    {


        if (Validator::make($_POST, [
            'email' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }





        if (Auth::attempt([
            'username' => $r->email,
            'password' => $r->password,
        ], true)) {
            return redirect('dashboard');
            die();
        }

        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }

    public function account_details_post(Request $r)
    {

        if (Validator::make($_POST, [
            'username' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'name' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['name' => 'Name is required.'])
                ->withInput();
        }





        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }


    public function register_post(Request $r)
    {


        if (Validator::make($_POST, [
            'name' => 'required|string|min:4'
        ])->fails()) {
            return back()
                ->withErrors(['name' => 'Enter your valid name.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'email' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password_1' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password_1' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }

        if ($r->password != $r->password_1) {
            return back()
                ->withErrors(['password_1' => 'Confirmation password did not match.'])
                ->withInput();
        }

        $u = Administrator::where([
            'email' => $_POST['email']
        ])->orwhere([
            'username' => $_POST['email']
        ])->first();


        if ($u != null) {
            $u->password = password_hash($r->password, PASSWORD_DEFAULT);
            $u->save();
        } else {
            $admin = new Administrator();
            $admin->username = $r->email;
            $admin->name = $r->name;
            //$admin->avatar = 'user.png';
            $admin->password = password_hash($r->password, PASSWORD_DEFAULT);

            if (!$admin->save()) {
                return back()
                    ->withErrors(['email' => 'Failed to create account. Try again.'])
                    ->withInput();
            }
        }



        if (Auth::attempt([
            'username' => $r->email,
            'password' => $r->password,
        ], true)) {
            return redirect('dashboard');
            die();
        }
        return redirect('login');
    }
}




//Combined Register.blade.php

@extends('layouts.base-layout')
@section('base-content')
<?php $header_data['header_style'] = 2; ?>

<body>
<main class="page-wrapper">
  @include('layouts.header', $header_data)

  <section class="position-relative h-100 pt-5 pb-4">
    <div class="container d-flex flex-wrap justify-content-center justify-content-xl-start h-100 pt-5">

      {{-- Left: Form --}}
      <div class="w-100 align-self-end pt-1 pt-md-4 pb-4" style="max-width: 526px;">
        <h1 class="text-center text-xl-start">Register</h1>
        <p class="lead fs-sm text-dark mt-3 border border-primary p-3 bg-secondary rounded">
          Dear respected visitor, thank you for your interest in the ICT for Persons With Disabilities. We
          are seeking to create a national database for Persons With Disabilities to enhance ways of
          reaching out and supporting. Please fill out this form to help us get to know you better.
        </p>
        <p class="text-center text-xl-start pb-3 mb-3">
          Already registered? <a href="login">Login here</a>
        </p>

        @php 
          // Default to 'pwd' (Person with Disability)
          $oldRole = old('role', 'pwd'); 
        @endphp

        <form class="needs-validation" method="POST" action="{{ url('/register') }}" novalidate>
          @csrf

          {{-- 1) ROLE SELECTOR --}}
          <div class="mb-4">
            <label class="form-label">I am a:</label><br>
            <label class="me-3">
              <input type="radio" name="role" value="pwd"  {{ $oldRole=='pwd'?'checked':'' }}> Person with Disability
            </label>
            <label class="me-3">
              <input type="radio" name="role" value="opd"  {{ $oldRole=='opd'?'checked':'' }}> OPD
            </label>
            <label>
              <input type="radio" name="role" value="du"   {{ $oldRole=='du' ?'checked':'' }}> District Union
            </label>
            @error('role') <div class="text-danger">{{ $message }}</div> @enderror
          </div>

          {{-- 2) PWD FIELDS --}}
          <div class="role-section" id="pwd" style="display:none;">
            <div class="row">
              <div class="col-sm-6 mb-3">
                @include('components.input-text',['name'=>'name','label'=>'Full name'])
              </div>
              <div class="col-sm-6 mb-3">
                @include('components.input-text',['name'=>'email','type'=>'email','label'=>'Email address'])
              </div>
            </div>
            <div class="row">
              <div class="col-sm-6 mb-3">
                @include('components.input-text',['name'=>'phone','label'=>'Phone number'])
              </div>
              <div class="col-sm-6 mb-3">
                <label>District</label>
                <select name="district" class="form-control">
                  <option value="">Select…</option>
                  @foreach($districts as $id => $d) 
                    <option value="{{ $id }}" {{ old('district')==$id ? 'selected':'' }}>{{ $d }}</option>
                  @endforeach
                </select>
                @error('district')<div class="text-danger">{{ $message }}</div>@enderror
              </div>
            </div>
            <div class="row">
              <div class="col-sm-6 mb-3">
                <label>Disability</label>
                <select name="disability" class="form-control">
                  <option value="">Select…</option>
                  @foreach($disabilities as $id => $dis)
                    <option value="{{ $id }}" {{ old('disability')==$id?'selected':'' }}>{{ $dis }}</option>
                  @endforeach
                </select>
                @error('disability')<div class="text-danger">{{ $message }}</div>@enderror
              </div>
              <div class="col-sm-6 mb-3">
                <label>Gender</label><br>
                <label><input type="radio" name="gender" value="male"   {{ old('gender')=='male'?'checked':'' }}> Male</label>
                <label class="ms-2"><input type="radio" name="gender" value="female" {{ old('gender')=='female'?'checked':'' }}> Female</label>
                <label class="ms-2"><input type="radio" name="gender" value="other"  {{ old('gender')=='other'?'checked':'' }}> Other</label>
                @error('gender')<div class="text-danger">{{ $message }}</div>@enderror
              </div>
            </div>
            <div class="mb-3">
              @include('components.input-text',['name'=>'village','label'=>'Village'])
            </div>
          </div>

          {{-- 3) OPD FIELDS --}}
          <div class="role-section" id="opd" style="display:none;">
            <div class="mb-3">
              @include('components.input-text',['name'=>'org_name','label'=>'Organization Name'])
            </div>
            <div class="mb-3">
              <label>District</label>
              <select name="district" class="form-control">
                <option value="">Select…</option>
                @foreach($districts as $id => $d)
                  <option value="{{ $id }}" {{ old('district')==$id?'selected':'' }}>{{ $d }}</option>
                @endforeach
              </select>
              @error('district')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
          </div>

          {{-- 4) DU FIELDS --}}
          <div class="role-section" id="du" style="display:none;">
            <div class="mb-3">
              @include('components.input-text',['name'=>'org_name','label'=>'District Union Name'])
            </div>
            <div class="mb-3">
              <label>District</label>
              <select name="district" class="form-control">
                <option value="">Select…</option>
                @foreach($districts as $id => $d)
                  <option value="{{ $id }}" {{ old('district')==$id?'selected':'' }}>{{ $d }}</option>
                @endforeach
              </select>
              @error('district')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
          </div>

          {{-- 5) PASSWORD --}}
          <div class="row">
            <div class="col-12 mb-3">
              @include('components.input-text',['name'=>'password','type'=>'password','label'=>'Password'])
            </div>
            <div class="col-12 mb-3">
              @include('components.input-text',['name'=>'password_confirmation','type'=>'password','label'=>'Confirm password'])
            </div>
          </div>

          <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign up</button>
        </form>
      </div>

      {{-- Right: Fixed Parallax Graphic --}}
      <div class="w-100 align-self-end pt-0 parallax mx-auto d-none d-md-block"
           style="max-width: 600px; position: sticky; top: 100px;">
        <div class="parallax-layer" data-depth="0.1">
          <img src="assets/img/landing/online-courses/hero/layer01.png" alt="Layer">
        </div>
        <div class="parallax-layer" data-depth="0.13">
          <img src="assets/img/landing/online-courses/hero/layer02.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-5" data-depth="-0.12">
          <img src="assets/img/landing/online-courses/hero/layer03.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-3" data-depth="0.27">
          <img src="assets/img/landing/online-courses/hero/layer04.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-1" data-depth="-0.18">
          <img src="assets/img/landing/online-courses/hero/layer05.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-1" data-depth="0.1">
          <img src="assets/img/landing/online-courses/hero/layer06.png" alt="Layer">
        </div>
      </div>

    </div>
  </section>
</main>

<script>
// Toggle visibility of role‐specific sections
document.querySelectorAll('input[name="role"]').forEach(radio => {
  radio.addEventListener('change', () => {
    document.querySelectorAll('.role-section').forEach(div => div.style.display = 'none');
    const sel = document.getElementById(radio.value);
    if (sel) sel.style.display = 'block';
  });
});
// On page load, show the default or old selection
const oldRole = "{{ $oldRole }}";
if (oldRole) {
  const r = document.querySelector(`input[name="role"][value="${oldRole}"]`);
  if (r) r.dispatchEvent(new Event('change'));
}
</script>
@endsection



//Combined AccountController.php

<?php

namespace App\Http\Controllers;

use App\Models\User;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Facades\Admin;
use Illuminate\Http\Request;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;

//use Illuminate\Support\Facades\Hash;

class AccountController extends BaseController
{

    public function register()
    {
        if (Auth::guard()->check()) {
            return redirect("/dashboard");
        }
        
        $districts    = \App\Models\District::pluck('name','id');
        $disabilities = \App\Models\Disability::pluck('name','id');
        return view('register', compact('districts','disabilities'));
    }
    public function login(Request $request)
    {
        // $password = '1234';
        // $hashedPassword = Hash::make($password);
        // dd($hashedPassword);
        // die();
        if (Auth::guard()->check()) {
            // User is already logged in
            $user = Auth::user();
            if ($user->isRole('district-union')) {
                return redirect("/du-dashboard");
            } elseif ($user->isRole('opd')) {
                return redirect("/opd-dashboard");
            } elseif ($user->isRole('administrator') || $user->isRole('NUDIPU')) {
                return redirect("/dashboard");
            } elseif ($user->isRole('pwd') || $user->isRole('basic')) {
                return redirect("/pwd-dashboard");
            }
        }
        return view('login');
    }

    public function activateAccount(Request $request)
    {
        $existingUser = User::where('email', $request->email)->first();

        if ($existingUser) {
            // Return an error view or message if the email is already in use
            return 'The email address is already in use.';
        }
        //Else creat new account.
        $user = new User;
        $user->name = $request->name;
        $user->email = $request->email;
        $user->username = $request->email;
        $user->password = bcrypt($request->password);
        $user->save();

        $activation_token = Str::random(60);  // Generate a random token
        $user->activation_token = $activation_token; // Assuming you have this column in your users table
        $user->save();

        $user->sendActivationEmail($activation_token);

        return view('emails.approval_notification');
    }

    public function activate(Request $request)
    {
        $email = $request->query('email');
        $token = $request->query('token');

        $user = User::where('email', $email)->where('activation_token', $token)->first();

        if ($user) {
            $user->activation_token = null; // Clear the activation token
            // $user->email_verified_at = now();
            $user->approved = 1; // Mark email as verified
            $user->save();

            return view('activation-success'); // Or redirect to a login page with a success message
        } else {
            return view('activation-failed'); // Or redirect to an error page
        }
    }


    public function account_details()
    {
        $_SESSION['form'] = Auth::user();
        return view('account-details');
    }

    public function dashboard()
    {
        return view('account-dashboard');
    }

    public function logout()
    {
        Auth::logout();
        return redirect('/');
    }

    public function login_post(Request $r)
    {


        if (Validator::make($_POST, [
            'email' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }





        if (Auth::attempt([
            'username' => $r->email,
            'password' => $r->password,
        ], true)) {
            return redirect('dashboard');
            die();
        }

        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }

    public function account_details_post(Request $r)
    {

        if (Validator::make($_POST, [
            'username' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'name' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['name' => 'Name is required.'])
                ->withInput();
        }





        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }


    public function register_post(Request $r)
{
    // base validation
    $v = Validator::make($r->all(), [
        'role'                  => ['required', Rule::in(['pwd','opd','du'])],
        'email'                 => 'required|email|unique:users,email',
        'password'              => 'required|min:4|confirmed',
    ]);

    // role‐specific
    if ($r->role === 'pwd') {
        $v->sometimes('name',      'required|string|min:3', fn() => true);
        $v->sometimes('phone',     'required|string',       fn() => true);
        $v->sometimes('district',  'required|exists:districts,id', fn() => true);
        $v->sometimes('disability','required|exists:disabilities,id', fn() => true);
        $v->sometimes('gender',    'required|in:male,female,other', fn() => true);
        $v->sometimes('village',   'required|string',       fn() => true);
    } else {
        // opd or du
        $v->sometimes('org_name', 'required|string|min:3', fn() => in_array($r->role, ['opd','du']));
        $v->sometimes('district', 'required|exists:districts,id', fn() => in_array($r->role, ['opd','du']));
    }

    if ($v->fails()) {
        return back()->withErrors($v)->withInput();
    }

    // create user
    $user = User::create([
        'name'     => $r->role=='pwd' ? $r->name : $r->org_name,
        'email'    => $r->email,
        'password' => bcrypt($r->password),
        'approved' => 0,
    ]);
    $user->assignRole($r->role=='pwd' ? 'pwd' : ($r->role=='opd'?'opd':'district-union'));

    // if OPD/DU: create Organisation
    if (in_array($r->role,['opd','du'])) {
        \App\Models\Organisation::create([
            'name'              => $r->org_name,
            'district_id'       => $r->district,
            'user_id'           => $user->id,
            'relationship_type' => $r->role,
        ]);
    }

    // if PWD: attach profile
    if ($r->role === 'pwd') {
        $user->profile()->create([
            'phone'         => $r->phone,
            'district_id'   => $r->district,
            'disability_id' => $r->disability,
            'gender'        => $r->gender,
            'village'       => $r->village,
            'status'        => 'pending',
        ]);
    }

    // send activation/approval email…
    $user->sendActivationEmail(Str::random(60));

    return redirect('login')
           ->with('success','Registration submitted. Please await verification.');
}

}







SELECT *
FROM `people`
WHERE `email` = 'nyene@gmail.com'
LIMIT 1;


SELECT *
FROM `users`
WHERE `email` = 'ogikimosesodera@gmail.com'
LIMIT 1;


only pwd activateAccount method that works fine 

 public function activateAccount(Request $request)
    {
        // 1) Base validation (phone_number must be exactly 10 digits, starting 0)
        $validator = Validator::make($request->all(), [
            'name'           => 'required|string|max:255',
            'email'          => 'required|email|unique:users,email',
            'password'       => 'required|confirmed|min:4',
                'phone_number' => [
                'required',
                'regex:/^0\d{9}$/',                  // 10 digits, starting 0
                Rule::unique('people', 'phone_number')
            ],
            'district'       => 'required|exists:districts,id',
            'disability'     => 'required|exists:disabilities,id',
            'sex'         => ['required', Rule::in(['Male','Female'])],
            'village'        => 'required|string|max:255',
            'dob'            => 'required|date|before:today',
        ], [
          'phone_number.regex'  => 'Phone Number must be 10 digits starting with 0 (e.g. 0762045035).',
          'phone_number.unique' => 'This phone number is already registered.',  
        ]);

       

        // 3) Grab the clean data
        $data = $validator->validated();



        // Compute age
        $age = Carbon::parse($data['dob'])->age;

        // 4) Create the User
        $user = new User;
        $user->name             = $data['name'];
        $user->username         = $data['email'];
        $user->email            = $data['email'];
        $user->password         = Hash::make($data['password']);
        $user->approved         = 0;
        $user->activation_token = Str::random(60);
        $user->save();
        $user->assignRole('pwd');

        // 5) Create the Person
        $person = Person::create([
            'user_id'       => $user->id,
            'name'          => $data['name'],
            'email'         => $data['email'],
            'phone_number' => $data['phone_number'],
            'district_id'   => $data['district'],
            'disability'    => $data['disability'],
            'sex'           => $data['sex'],
            'village'       => $data['village'],
            'dob'           => $data['dob'],
            'age'           => $age,
            'profiler'      => 'Self Profiled',
            'is_verified'   => 0,
        ]);

        $person->disabilities()->attach($data['disability']);

        // 6) Send activation email
        //$user->sendActivationEmail($user->activation_token);

        return redirect('login')
               ->with('success', 'Thanks For Profiling Yourself! Provide your email and Password to Login to your Dashboard.');
    }

//The register blade for pwds only
@extends('layouts.base-layout')
@section('base-content')
@php $header_data['header_style'] = 2; @endphp

<main class="page-wrapper">
  @include('layouts.header', $header_data)

  <section class="position-relative h-100 pt-5 pb-4">
    <div class="container d-flex justify-content-center h-100 pt-5">
      <div class="w-100" style="max-width:526px;">
        <h1 class="text-center">Register</h1>
        <p class="lead fs-sm text-dark mt-3 border border-primary p-3 bg-secondary rounded">
          …Please fill out this form to help us get to know you better.
        </p>
        <p class="text-center pb-3">Already registered? <a href="{{ url('login') }}">Login here</a></p>

        <form class="needs-validation" method="POST" action="{{ url('account-activation') }}" novalidate>
          @csrf

          {{-- Full Name & Email --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'name','label'=>'Full Name'])
            </div>
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'email','type'=>'email','label'=>'Email Address'])
            </div>
          </div>

          {{-- Password & Confirmation --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'password','type'=>'password','label'=>'Password'])
            </div>
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'password_confirmation','type'=>'password','label'=>'Confirm Password'])
            </div>
          </div>

          {{-- Phone & District --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'phone_number','label'=>'Phone Number'])
            </div>
            <div class="col-sm-6 mb-3">
              <label for="district" class="form-label">District</label>
              <select name="district" id="district" class="form-select">
                <option value="">Select…</option>
                @foreach($districts as $id=>$d)
                  <option value="{{ $id }}" {{ old('district')==$id?'selected':'' }}>{{ $d }}</option>
                @endforeach
              </select>
              @error('district')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
          </div>

          {{-- Disability & sex --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              <label for="disability" class="form-label">Disability</label>
              <select name="disability" id="disability" class="form-select">
                <option value="">Select…</option>
                @foreach($disabilities as $id=>$name)
                  <option value="{{ $id }}" {{ old('disability')==$id?'selected':'' }}>{{ $name }}</option>
                @endforeach
              </select>
              @error('disability')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
            <div class="col-sm-6 mb-3">
            <label class="form-label">Gender</label><br>
            <label class="me-3">
              <input type="radio" name="sex" value="Male"   {{ old('sex')=='Male'?'checked':'' }}> Male
            </label>
            <label class="me-3">
              <input type="radio" name="sex" value="Female" {{ old('sex')=='Female'?'checked':'' }}> Female
            </label>
            @error('sex')<div class="text-danger">{{ $message }}</div>@enderror
          </div>
          </div>

          {{-- Village --}}
          <div class="mb-3">
            @include('components.input-text',['name'=>'village','label'=>'Village'])
          </div>

          {{-- Date of Birth --}}
          <div class="mb-4">
            @include('components.input-text',[
              'name' => 'dob',
              'type' => 'date',
              'label'=> 'Date of Birth',
            ])
          </div>

          <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign up</button>
        </form>
      </div>
    </div>
  </section>
</main>
@endsection
