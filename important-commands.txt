lsphp artisan make:component Alert --inline

php artisan migrate

php artisan make:migration add_process_cates --table=people


php artisan make:migration create_courses_table
php artisan make:migration create_course_categories_table
php artisan make:migration create_course_chapters_table
php artisan make:migration create_course_topics_table
php artisan make:migration create_participants_table
php artisan make:migration create_post_categories_table
php artisan make:migration create_news_posts_table
php artisan make:migration create_eevnts_table
php artisan make:migration create_event_bookings_table
php artisan make:migration create_event_tickets_table
php artisan make:migration create_event_speakers_table
php artisan make:migration create_jobs_table
php artisan make:migration create_admin_roles_table
php artisan make:migration create_service_providers_table 
php artisan make:migration create_associations_table 
php artisan make:migration create_groups_table 
php artisan make:migration create_people_table 
php artisan make:migration create_disabilities_table 
php artisan make:migration create_institutions_table 
php artisan make:migration create_counselling_centres_table 
php artisan make:migration create_counselling_centres_table 
php artisan make:migration create_job_applications_table 
php artisan make:migration create_products_table 
php artisan make:migration create_product_orders_table 

Encore\Admin\Auth\Database\Administrator::class,
php artisan admin:make FormSr4Controller --model=App\FormSr4
php artisan admin:make ParticipantController --model=App\\Participant

php artisan admin:controller --model=App\FormSr4
php artisan admin:make FormSr4Controller --model=App\FormSr4

 
php artisan admin:make CourseController --model=App\\Models\\Course
php artisan admin:make ParticipantController --model=App\\Models\\Participant
php artisan admin:make MembersController --model=App\Models\User
php artisan admin:make PostCategoryController --model=App\Models\PostCategory
php artisan admin:make NewsPostController --model=App\Models\NewsPost
php artisan admin:make EventController --model=App\Models\Event
php artisan admin:make EventBookingController --model=App\Models\EventBooking
php artisan admin:make ServiceProviderController --model=App\Models\ServiceProvider
php artisan admin:make AssociationController --model=App\Models\Association
php artisan admin:make GroupController --model=App\Models\Group
php artisan admin:make PersonController --model=App\Models\Person
php artisan admin:make DisabilityController --model=App\Models\Disability
php artisan admin:make InstitutionController --model=App\Models\Institution
php artisan admin:make CounsellingCentreController --model=App\Models\CounsellingCentre
php artisan admin:make JobController --model=App\Models\Job
php artisan admin:make JobApplicationController --model=App\Models\JobApplication
php artisan admin:make ProductController --model=App\Models\Product
php artisan admin:make ProductOrderController --model=App\Models\ProductOrder

php artisan make:factory TeacherFactory


php artisan make:model MyClass
php artisan make:model Student
php artisan make:model Teacher
php artisan make:model Subject
php artisan make:model Exam
php artisan make:model GeneralExam
php artisan make:model CourseCategory
php artisan make:model Course
php artisan make:model CourseChapter
php artisan make:model CourseTopic
php artisan make:model Utils
php artisan make:model TrafficRecord
php artisan make:model Participant
php artisan make:model Campus
php artisan make:model UserHasProgram
php artisan make:model Users
php artisan make:model User
php artisan make:model PostCategory
php artisan make:model NewsPost
php artisan make:model Event
php artisan make:model EventTicket
php artisan make:model EventBooking
php artisan make:model EventSpeaker
php artisan make:model AdminRoleUser
php artisan make:model ServiceProvider
php artisan make:model Association
php artisan make:model Group
php artisan make:model Person
php artisan make:model Disability
php artisan make:model Institution
php artisan make:model CounsellingCentre
php artisan make:model Job
php artisan make:model JobApplication
php artisan make:model Product
php artisan make:model ProductOrder

->photo      



ethnicity
religion
birth_hospital
languages
dob
sex
marital_status         
district_of_origin
place_of_birth            
birth_no_hospital_description
disabilities
 



//Ogiki Moses Odera
php artisan make:seed DuAgentRoleAndPermissionSeeder
php artisan db:seed --class=DuAgentRoleAndPermissionSeeder
php artisan admin:make AgentController --model=App\Models\User
$router->resource('du-agents', AgentController::class);

php artisan make:mail DuAgentCreated --markdown=emails.du_agent_created


 // Ogiki Moses Odera 


 php artisan admin:make DataImportController --model=App\Models\DataImport

 php artisan make:model DataImport  -m 

 php artisan admin:make Report_2Controller --model=App\Models\Report

 php artisan make:migration add_column_district_union_to_table_name --table=data_imports


Ogiki Moses
How to migrate to online database 

Route::get('migrate', function () { 
    Artisan::call('migrate', ['--force' => true]); 
    return Artisan::output();
});

How to seed to online database 

Route::get('seed', function() {
    Artisan::call('db:seed', [
      '--class' => 'DuAgentRoleAndPermissionSeeder',
      '--force' => true, // if in production
    ]);
    return 'Seeder executed.';
})->middleware('auth:admin');





// OLD CODES STYLES
//resources\views\widgets\box-5.blade.php
<?php

$title     = $title     ?? 'Title';
$style     = $style     ?? 'success';
$number    = $number    ?? '0.00';
$sub_title = $sub_title ?? 'Sub-titles';
$link      = $link      ?? 'javascript:;';

$is_dark = isset($is_dark) ? (bool)$is_dark : true;

$bg     = $is_dark ? 'bg-primary' : '';
$text   = $is_dark ? 'text-white' : 'text-primary';
$text2  = $is_dark ? 'text-white' : 'text-dark';
$border = $is_dark ? 'border-primary' : 'border-primary';

if ($style === 'danger') {
    $text   = 'text-white';
    $bg     = 'bg-danger';
    $text2  = 'text-white';
    $border = 'border-danger';
}

$ariaLabel = "{$title}: {$number} {$sub_title}.";

?>

<a href="{{ $link }}"
   class="card {{ $bg }} {{ $border }} mb-4 mb-md-5"
   aria-label="{{ $ariaLabel }}">
    <div class="card-body py-0">

        {{-- Title with 2-line clamp --}}
        <p class="h3 text-bold mb-2 mb-md-3 {{ $text }}"
           style="
               display: -webkit-box;
               -webkit-line-clamp: 2;
               -webkit-box-orient: vertical;
               overflow: hidden;
               text-overflow: ellipsis;
               line-height: 1.4em;
               max-height: 2.8em;
           ">
            {{ $title }}
        </p>

        {{-- Number --}}
        <p class="m-0 text-right {{ $text2 }} h3" style="line-height: 3.2rem;">
            {{ $number }}
        </p>

        {{-- Subtitle --}}
        <p class="mt-4 {{ $text2 }}">
            {{ $sub_title }}
        </p>
    </div>
</a>





//resources\views\dashboard\disability-category-count.blade.php

<div class="card text-center" id="card-element">
    <div class="card-body" id="body-element">
        <h5 class="card-text text-center">Count Of Persons With Disabilities by Disability Category</h5>
        <label for="districtSelect">
            <select name="districtSelector" id="districtSelector" onchange="UpdateCategory()" class="form-select">
                <option value="all">All Districts</option>
                @foreach ($districtDisabilityCounts as $districtName => $counts)
                    <option value="{{ $districtName }}">{{ $districtName }}</option>
                @endforeach
            </select>
        </label>
        <label for="disabilityCountFilter">
            <select name="disabilityCountFilter" id="disabilityCountFilter" onchange="UpdateCategory()" class="form-select">
                <option value="all">All Disabilities</option>
                 <option value="5" selected>Top 5 Disabilities</option>
                <option value="2">Top 2 Disabilities</option> 
            </select>
        </label>
        <div class="chart-container">
            <canvas id="disabilityCountChart"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const disabilityData = @json($disabilityCounts);
    var ctx = document.getElementById('disabilityCountChart').getContext('2d');
    var initialData = {
        labels: Object.keys(disabilityData),
        datasets: [{
            label: 'Number of Persons by Disability Category',
            data: Object.values(disabilityData), //Retrieving values from json object
            backgroundColor: 'green', // background color
            borderColor: 'green',
            borderWidth: 1
        }]
    };
    const disabilityChart = new Chart(ctx, {
        type: 'bar',
        data: initialData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    type: 'logarithmic',
                    ticks: {
                        callback: function(value, index, values) {
                            if (value === 10 || value === 100 || value === 1000 || value === 10000) {
                                return value.toString();
                            }
                        }
                    }
                },
                x: {
                    ticks: {
                        autoSkip: false,
                        fontSize: 8,
                        minRotation: 45,
                        maxRotation: 40
                    }
                }
            }
        },
    });

    function UpdateCategory() {
    var selectedDistrictCategory = document.getElementById('districtSelector').value;
    var disabilityFilter = document.getElementById('disabilityCountFilter').value;
    
    let filteredData;
    if (selectedDistrictCategory === 'all') {
        filteredData = disabilityData;
    } else {
        const districtData = @json($districtDisabilityCounts);
        filteredData = districtData[selectedDistrictCategory];
    }

    // Apply filter for top 5 or top 2 if selected
    let labels = Object.keys(filteredData);
    let data = Object.values(filteredData);
    if (disabilityFilter === '5') {
        labels = labels.slice(0, 5);
        data = data.slice(0, 5);
    } else if (disabilityFilter === '2') {
        labels = labels.slice(0, 2);
        data = data.slice(0, 2);
    }

    // Update the chart
    disabilityChart.data.labels = labels;
    disabilityChart.data.datasets[0].data = data;
    disabilityChart.update();
}

 UpdateCategory();
</script>

//Original register blade

@extends('layouts.base-layout')
{{-- account-details --}}
@section('base-content')
    <?php
    $header_data['header_style'] = 2;
    
    ?>

    <body>
        <main class="page-wrapper">

            @include('layouts.header', $header_data)

            <!-- Page content -->
            <section class="position-relative h-100 pt-5 pb-4">

                <!-- Sign up form -->
                <div class="container d-flex flex-wrap justify-content-center justify-content-xl-start h-100 pt-5">

                    <div class="w-100 align-self-end pt-1 pt-md-4 pb-4" style="max-width: 526px;">
                        <h1 class="text-center text-xl-start">Register</h1>

                        <p class="lead fs-sm text-dark mt-3 border border-primary p-3 bg-secondary rounded">
                            Dear respected visitor, thank you for your interest in the ICT for Persons With Disabilities. We
                            are seeking to create an national database for for Persons With Disabilities to enhance ways of
                            reaching out and supporting.
                            Please fill out this form to help us get to know you better.
                        </p>
                        <p class="text-center text-xl-start pb-3 mb-3">Already registred an account? <a href="login">Login
                                in here</a></p>
                        <form class="needs-validation" method="POST" action="{{ url('account-activation') }}" novalidate>
                            <input type="hidden" name="_token" value="{{ csrf_token() }}">
                            <div class="row">
                                <div class="col-sm-6 mb-3">
                                    @include('components.input-text', [
                                        'name' => 'name',
                                        'label' => 'Full name',
                                    ])
                                </div>
                                <div class="col-sm-6 mb-3">
                                    @include('components.input-text', [
                                        'name' => 'email',
                                        'type' => 'email',
                                        'label' => 'Email address',
                                    ])
                                </div>
                                <div class="col-12 mb-3">

                                    @include('components.input-text', [
                                        'name' => 'password',
                                        'type' => 'password',
                                        'label' => 'Password',
                                    ])

                                </div>
                                <div class="col-12 mb-4">

                                    @include('components.input-text', [
                                        'name' => 'password_1',
                                        'type' => 'password',
                                        'label' => 'Confirm password',
                                    ])
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign up</button>
                        </form>
                    </div>


                    <div class="w-100 align-self-end pt-0 parallax mx-auto d-none d-md-block" style="max-width: 600px;">
                        <!-- Parallax gfx -->
                        <div class="parallax-layer" data-depth="0.1">
                            <img src="assets/img/landing/online-courses/hero/layer01.png" alt="Layer">
                        </div>
                        <div class="parallax-layer" data-depth="0.13">
                            <img src="assets/img/landing/online-courses/hero/layer02.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-5" data-depth="-0.12">
                            <img src="assets/img/landing/online-courses/hero/layer03.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-3" data-depth="0.27">
                            <img src="assets/img/landing/online-courses/hero/layer04.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-1" data-depth="-0.18">
                            <img src="assets/img/landing/online-courses/hero/layer05.png" alt="Layer">
                        </div>
                        <div class="parallax-layer zindex-1" data-depth="0.1">
                            <img src="assets/img/landing/online-courses/hero/layer06.png" alt="Layer">
                        </div>
                    </div>
                </div>



            </section>
        </main>
    @endsection


//AccountController
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Facades\Admin;
use Illuminate\Http\Request;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
//use Illuminate\Support\Facades\Hash;

class AccountController extends BaseController
{

    public function register()
    {
        if (Auth::guard()->check()) {
            return redirect("/dashboard");
        }
        return view('register');
    }
    public function login(Request $request)
    {
        // $password = '1234';
        // $hashedPassword = Hash::make($password);
        // dd($hashedPassword);
        // die();
        if (Auth::guard()->check()) {
            // User is already logged in
            $user = Auth::user();
            if ($user->isRole('district-union')) {
                return redirect("/du-dashboard");
            } elseif ($user->isRole('opd')) {
                return redirect("/opd-dashboard");
            } elseif ($user->isRole('administrator') || $user->isRole('NUDIPU')) {
                return redirect("/dashboard");
            } elseif ($user->isRole('pwd') || $user->isRole('basic')) {
                return redirect("/pwd-dashboard");
            }
        }
        return view('login');
    }

    public function activateAccount(Request $request)
    {
        $existingUser = User::where('email', $request->email)->first();

        if ($existingUser) {
            // Return an error view or message if the email is already in use
            return 'The email address is already in use.';
        }
        //Else creat new account.
        $user = new User;
        $user->name = $request->name;
        $user->email = $request->email;
        $user->username = $request->email;
        $user->password = bcrypt($request->password);
        $user->save();

        $activation_token = Str::random(60);  // Generate a random token
        $user->activation_token = $activation_token; // Assuming you have this column in your users table
        $user->save();

        $user->sendActivationEmail($activation_token);

        return view('emails.approval_notification');


    }

    public function activate(Request $request)
    {
        $email = $request->query('email');
        $token = $request->query('token');

        $user = User::where('email', $email)->where('activation_token', $token)->first();

        if ($user) {
            $user->activation_token = null; // Clear the activation token
            // $user->email_verified_at = now();
            $user->approved = 1; // Mark email as verified
            $user->save();

            return view('activation-success'); // Or redirect to a login page with a success message
        } else {
            return view('activation-failed'); // Or redirect to an error page
        }
    }


    public function account_details()
    {
        $_SESSION['form'] = Auth::user();
        return view('account-details');
    }

    public function dashboard()
    {
        return view('account-dashboard');
    }

    public function logout()
    {
        Auth::logout();
        return redirect('/');
    }

    public function login_post(Request $r)
    {


        if (Validator::make($_POST, [
            'email' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }





        if (Auth::attempt([
            'username' => $r->email,
            'password' => $r->password,
        ], true)) {
            return redirect('dashboard');
            die();
        }

        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }

    public function account_details_post(Request $r)
    {

        if (Validator::make($_POST, [
            'username' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'name' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['name' => 'Name is required.'])
                ->withInput();
        }





        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }


    public function register_post(Request $r)
    {


        if (Validator::make($_POST, [
            'name' => 'required|string|min:4'
        ])->fails()) {
            return back()
                ->withErrors(['name' => 'Enter your valid name.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'email' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password_1' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password_1' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }

        if ($r->password != $r->password_1) {
            return back()
                ->withErrors(['password_1' => 'Confirmation password did not match.'])
                ->withInput();
        }

        $u = Administrator::where([
            'email' => $_POST['email']
        ])->orwhere([
            'username' => $_POST['email']
        ])->first();


        if ($u != null) {
            $u->password = password_hash($r->password, PASSWORD_DEFAULT);
            $u->save();
        } else {
            $admin = new Administrator();
            $admin->username = $r->email;
            $admin->name = $r->name;
            //$admin->avatar = 'user.png';
            $admin->password = password_hash($r->password, PASSWORD_DEFAULT);

            if (!$admin->save()) {
                return back()
                    ->withErrors(['email' => 'Failed to create account. Try again.'])
                    ->withInput();
            }
        }



        if (Auth::attempt([
            'username' => $r->email,
            'password' => $r->password,
        ], true)) {
            return redirect('dashboard');
            die();
        }
        return redirect('login');
    }
}




//Combined Register.blade.php

@extends('layouts.base-layout')
@section('base-content')
<?php $header_data['header_style'] = 2; ?>

<body>
<main class="page-wrapper">
  @include('layouts.header', $header_data)

  <section class="position-relative h-100 pt-5 pb-4">
    <div class="container d-flex flex-wrap justify-content-center justify-content-xl-start h-100 pt-5">

      {{-- Left: Form --}}
      <div class="w-100 align-self-end pt-1 pt-md-4 pb-4" style="max-width: 526px;">
        <h1 class="text-center text-xl-start">Register</h1>
        <p class="lead fs-sm text-dark mt-3 border border-primary p-3 bg-secondary rounded">
          Dear respected visitor, thank you for your interest in the ICT for Persons With Disabilities. We
          are seeking to create a national database for Persons With Disabilities to enhance ways of
          reaching out and supporting. Please fill out this form to help us get to know you better.
        </p>
        <p class="text-center text-xl-start pb-3 mb-3">
          Already registered? <a href="login">Login here</a>
        </p>

        @php 
          // Default to 'pwd' (Person with Disability)
          $oldRole = old('role', 'pwd'); 
        @endphp

        <form class="needs-validation" method="POST" action="{{ url('/register') }}" novalidate>
          @csrf

          {{-- 1) ROLE SELECTOR --}}
          <div class="mb-4">
            <label class="form-label">I am a:</label><br>
            <label class="me-3">
              <input type="radio" name="role" value="pwd"  {{ $oldRole=='pwd'?'checked':'' }}> Person with Disability
            </label>
            <label class="me-3">
              <input type="radio" name="role" value="opd"  {{ $oldRole=='opd'?'checked':'' }}> OPD
            </label>
            <label>
              <input type="radio" name="role" value="du"   {{ $oldRole=='du' ?'checked':'' }}> District Union
            </label>
            @error('role') <div class="text-danger">{{ $message }}</div> @enderror
          </div>

          {{-- 2) PWD FIELDS --}}
          <div class="role-section" id="pwd" style="display:none;">
            <div class="row">
              <div class="col-sm-6 mb-3">
                @include('components.input-text',['name'=>'name','label'=>'Full name'])
              </div>
              <div class="col-sm-6 mb-3">
                @include('components.input-text',['name'=>'email','type'=>'email','label'=>'Email address'])
              </div>
            </div>
            <div class="row">
              <div class="col-sm-6 mb-3">
                @include('components.input-text',['name'=>'phone','label'=>'Phone number'])
              </div>
              <div class="col-sm-6 mb-3">
                <label>District</label>
                <select name="district" class="form-control">
                  <option value="">Select…</option>
                  @foreach($districts as $id => $d) 
                    <option value="{{ $id }}" {{ old('district')==$id ? 'selected':'' }}>{{ $d }}</option>
                  @endforeach
                </select>
                @error('district')<div class="text-danger">{{ $message }}</div>@enderror
              </div>
            </div>
            <div class="row">
              <div class="col-sm-6 mb-3">
                <label>Disability</label>
                <select name="disability" class="form-control">
                  <option value="">Select…</option>
                  @foreach($disabilities as $id => $dis)
                    <option value="{{ $id }}" {{ old('disability')==$id?'selected':'' }}>{{ $dis }}</option>
                  @endforeach
                </select>
                @error('disability')<div class="text-danger">{{ $message }}</div>@enderror
              </div>
              <div class="col-sm-6 mb-3">
                <label>Gender</label><br>
                <label><input type="radio" name="gender" value="male"   {{ old('gender')=='male'?'checked':'' }}> Male</label>
                <label class="ms-2"><input type="radio" name="gender" value="female" {{ old('gender')=='female'?'checked':'' }}> Female</label>
                <label class="ms-2"><input type="radio" name="gender" value="other"  {{ old('gender')=='other'?'checked':'' }}> Other</label>
                @error('gender')<div class="text-danger">{{ $message }}</div>@enderror
              </div>
            </div>
            <div class="mb-3">
              @include('components.input-text',['name'=>'village','label'=>'Village'])
            </div>
          </div>

          {{-- 3) OPD FIELDS --}}
          <div class="role-section" id="opd" style="display:none;">
            <div class="mb-3">
              @include('components.input-text',['name'=>'org_name','label'=>'Organization Name'])
            </div>
            <div class="mb-3">
              <label>District</label>
              <select name="district" class="form-control">
                <option value="">Select…</option>
                @foreach($districts as $id => $d)
                  <option value="{{ $id }}" {{ old('district')==$id?'selected':'' }}>{{ $d }}</option>
                @endforeach
              </select>
              @error('district')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
          </div>

          {{-- 4) DU FIELDS --}}
          <div class="role-section" id="du" style="display:none;">
            <div class="mb-3">
              @include('components.input-text',['name'=>'org_name','label'=>'District Union Name'])
            </div>
            <div class="mb-3">
              <label>District</label>
              <select name="district" class="form-control">
                <option value="">Select…</option>
                @foreach($districts as $id => $d)
                  <option value="{{ $id }}" {{ old('district')==$id?'selected':'' }}>{{ $d }}</option>
                @endforeach
              </select>
              @error('district')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
          </div>

          {{-- 5) PASSWORD --}}
          <div class="row">
            <div class="col-12 mb-3">
              @include('components.input-text',['name'=>'password','type'=>'password','label'=>'Password'])
            </div>
            <div class="col-12 mb-3">
              @include('components.input-text',['name'=>'password_confirmation','type'=>'password','label'=>'Confirm password'])
            </div>
          </div>

          <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign up</button>
        </form>
      </div>

      {{-- Right: Fixed Parallax Graphic --}}
      <div class="w-100 align-self-end pt-0 parallax mx-auto d-none d-md-block"
           style="max-width: 600px; position: sticky; top: 100px;">
        <div class="parallax-layer" data-depth="0.1">
          <img src="assets/img/landing/online-courses/hero/layer01.png" alt="Layer">
        </div>
        <div class="parallax-layer" data-depth="0.13">
          <img src="assets/img/landing/online-courses/hero/layer02.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-5" data-depth="-0.12">
          <img src="assets/img/landing/online-courses/hero/layer03.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-3" data-depth="0.27">
          <img src="assets/img/landing/online-courses/hero/layer04.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-1" data-depth="-0.18">
          <img src="assets/img/landing/online-courses/hero/layer05.png" alt="Layer">
        </div>
        <div class="parallax-layer zindex-1" data-depth="0.1">
          <img src="assets/img/landing/online-courses/hero/layer06.png" alt="Layer">
        </div>
      </div>

    </div>
  </section>
</main>

<script>
// Toggle visibility of role‐specific sections
document.querySelectorAll('input[name="role"]').forEach(radio => {
  radio.addEventListener('change', () => {
    document.querySelectorAll('.role-section').forEach(div => div.style.display = 'none');
    const sel = document.getElementById(radio.value);
    if (sel) sel.style.display = 'block';
  });
});
// On page load, show the default or old selection
const oldRole = "{{ $oldRole }}";
if (oldRole) {
  const r = document.querySelector(`input[name="role"][value="${oldRole}"]`);
  if (r) r.dispatchEvent(new Event('change'));
}
</script>
@endsection



//Combined AccountController.php

<?php

namespace App\Http\Controllers;

use App\Models\User;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Facades\Admin;
use Illuminate\Http\Request;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;

//use Illuminate\Support\Facades\Hash;

class AccountController extends BaseController
{

    public function register()
    {
        if (Auth::guard()->check()) {
            return redirect("/dashboard");
        }
        
        $districts    = \App\Models\District::pluck('name','id');
        $disabilities = \App\Models\Disability::pluck('name','id');
        return view('register', compact('districts','disabilities'));
    }
    public function login(Request $request)
    {
        // $password = '1234';
        // $hashedPassword = Hash::make($password);
        // dd($hashedPassword);
        // die();
        if (Auth::guard()->check()) {
            // User is already logged in
            $user = Auth::user();
            if ($user->isRole('district-union')) {
                return redirect("/du-dashboard");
            } elseif ($user->isRole('opd')) {
                return redirect("/opd-dashboard");
            } elseif ($user->isRole('administrator') || $user->isRole('NUDIPU')) {
                return redirect("/dashboard");
            } elseif ($user->isRole('pwd') || $user->isRole('basic')) {
                return redirect("/pwd-dashboard");
            }
        }
        return view('login');
    }

    public function activateAccount(Request $request)
    {
        $existingUser = User::where('email', $request->email)->first();

        if ($existingUser) {
            // Return an error view or message if the email is already in use
            return 'The email address is already in use.';
        }
        //Else creat new account.
        $user = new User;
        $user->name = $request->name;
        $user->email = $request->email;
        $user->username = $request->email;
        $user->password = bcrypt($request->password);
        $user->save();

        $activation_token = Str::random(60);  // Generate a random token
        $user->activation_token = $activation_token; // Assuming you have this column in your users table
        $user->save();

        $user->sendActivationEmail($activation_token);

        return view('emails.approval_notification');
    }

    public function activate(Request $request)
    {
        $email = $request->query('email');
        $token = $request->query('token');

        $user = User::where('email', $email)->where('activation_token', $token)->first();

        if ($user) {
            $user->activation_token = null; // Clear the activation token
            // $user->email_verified_at = now();
            $user->approved = 1; // Mark email as verified
            $user->save();

            return view('activation-success'); // Or redirect to a login page with a success message
        } else {
            return view('activation-failed'); // Or redirect to an error page
        }
    }


    public function account_details()
    {
        $_SESSION['form'] = Auth::user();
        return view('account-details');
    }

    public function dashboard()
    {
        return view('account-dashboard');
    }

    public function logout()
    {
        Auth::logout();
        return redirect('/');
    }

    public function login_post(Request $r)
    {


        if (Validator::make($_POST, [
            'email' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'password' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['password' => 'Enter password with more than 3 chracters.'])
                ->withInput();
        }





        if (Auth::attempt([
            'username' => $r->email,
            'password' => $r->password,
        ], true)) {
            return redirect('dashboard');
            die();
        }

        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }

    public function account_details_post(Request $r)
    {

        if (Validator::make($_POST, [
            'username' => 'required|email',
        ])->fails()) {
            return back()
                ->withErrors(['email' => 'Enter a valid email address.'])
                ->withInput();
        }

        if (Validator::make($_POST, [
            'name' => 'required|min:2'
        ])->fails()) {
            return back()
                ->withErrors(['name' => 'Name is required.'])
                ->withInput();
        }





        return back()
            ->withErrors(['password' => 'Wrong email or password.'])
            ->withInput();
    }


    public function register_post(Request $r)
{
    // base validation
    $v = Validator::make($r->all(), [
        'role'                  => ['required', Rule::in(['pwd','opd','du'])],
        'email'                 => 'required|email|unique:users,email',
        'password'              => 'required|min:4|confirmed',
    ]);

    // role‐specific
    if ($r->role === 'pwd') {
        $v->sometimes('name',      'required|string|min:3', fn() => true);
        $v->sometimes('phone',     'required|string',       fn() => true);
        $v->sometimes('district',  'required|exists:districts,id', fn() => true);
        $v->sometimes('disability','required|exists:disabilities,id', fn() => true);
        $v->sometimes('gender',    'required|in:male,female,other', fn() => true);
        $v->sometimes('village',   'required|string',       fn() => true);
    } else {
        // opd or du
        $v->sometimes('org_name', 'required|string|min:3', fn() => in_array($r->role, ['opd','du']));
        $v->sometimes('district', 'required|exists:districts,id', fn() => in_array($r->role, ['opd','du']));
    }

    if ($v->fails()) {
        return back()->withErrors($v)->withInput();
    }

    // create user
    $user = User::create([
        'name'     => $r->role=='pwd' ? $r->name : $r->org_name,
        'email'    => $r->email,
        'password' => bcrypt($r->password),
        'approved' => 0,
    ]);
    $user->assignRole($r->role=='pwd' ? 'pwd' : ($r->role=='opd'?'opd':'district-union'));

    // if OPD/DU: create Organisation
    if (in_array($r->role,['opd','du'])) {
        \App\Models\Organisation::create([
            'name'              => $r->org_name,
            'district_id'       => $r->district,
            'user_id'           => $user->id,
            'relationship_type' => $r->role,
        ]);
    }

    // if PWD: attach profile
    if ($r->role === 'pwd') {
        $user->profile()->create([
            'phone'         => $r->phone,
            'district_id'   => $r->district,
            'disability_id' => $r->disability,
            'gender'        => $r->gender,
            'village'       => $r->village,
            'status'        => 'pending',
        ]);
    }

    // send activation/approval email…
    $user->sendActivationEmail(Str::random(60));

    return redirect('login')
           ->with('success','Registration submitted. Please await verification.');
}

}







SELECT *
FROM `people`
WHERE `email` = 'nyene@gmail.com'
LIMIT 1;


SELECT *
FROM `users`
WHERE `email` = 'ogikimosesodera@gmail.com'
LIMIT 1;


only pwd activateAccount method that works fine 

 public function activateAccount(Request $request)
    {
        // 1) Base validation (phone_number must be exactly 10 digits, starting 0)
        $validator = Validator::make($request->all(), [
            'name'           => 'required|string|max:255',
            'email'          => 'required|email|unique:users,email',
            'password'       => 'required|confirmed|min:4',
                'phone_number' => [
                'required',
                'regex:/^0\d{9}$/',                  // 10 digits, starting 0
                Rule::unique('people', 'phone_number')
            ],
            'district'       => 'required|exists:districts,id',
            'disability'     => 'required|exists:disabilities,id',
            'sex'         => ['required', Rule::in(['Male','Female'])],
            'village'        => 'required|string|max:255',
            'dob'            => 'required|date|before:today',
        ], [
          'phone_number.regex'  => 'Phone Number must be 10 digits starting with 0 (e.g. 0762045035).',
          'phone_number.unique' => 'This phone number is already registered.',  
        ]);

       

        // 3) Grab the clean data
        $data = $validator->validated();



        // Compute age
        $age = Carbon::parse($data['dob'])->age;

        // 4) Create the User
        $user = new User;
        $user->name             = $data['name'];
        $user->username         = $data['email'];
        $user->email            = $data['email'];
        $user->password         = Hash::make($data['password']);
        $user->approved         = 0;
        $user->activation_token = Str::random(60);
        $user->save();
        $user->assignRole('pwd');

        // 5) Create the Person
        $person = Person::create([
            'user_id'       => $user->id,
            'name'          => $data['name'],
            'email'         => $data['email'],
            'phone_number' => $data['phone_number'],
            'district_id'   => $data['district'],
            'disability'    => $data['disability'],
            'sex'           => $data['sex'],
            'village'       => $data['village'],
            'dob'           => $data['dob'],
            'age'           => $age,
            'profiler'      => 'Self Profiled',
            'is_verified'   => 0,
        ]);

        $person->disabilities()->attach($data['disability']);

        // 6) Send activation email
        //$user->sendActivationEmail($user->activation_token);

        return redirect('login')
               ->with('success', 'Thanks For Profiling Yourself! Provide your email and Password to Login to your Dashboard.');
    }

//The register blade for pwds only
@extends('layouts.base-layout')
@section('base-content')
@php $header_data['header_style'] = 2; @endphp

<main class="page-wrapper">
  @include('layouts.header', $header_data)

  <section class="position-relative h-100 pt-5 pb-4">
    <div class="container d-flex justify-content-center h-100 pt-5">
      <div class="w-100" style="max-width:526px;">
        <h1 class="text-center">Register</h1>
        <p class="lead fs-sm text-dark mt-3 border border-primary p-3 bg-secondary rounded">
          …Please fill out this form to help us get to know you better.
        </p>
        <p class="text-center pb-3">Already registered? <a href="{{ url('login') }}">Login here</a></p>

        <form class="needs-validation" method="POST" action="{{ url('account-activation') }}" novalidate>
          @csrf

          {{-- Full Name & Email --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'name','label'=>'Full Name'])
            </div>
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'email','type'=>'email','label'=>'Email Address'])
            </div>
          </div>

          {{-- Password & Confirmation --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'password','type'=>'password','label'=>'Password'])
            </div>
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'password_confirmation','type'=>'password','label'=>'Confirm Password'])
            </div>
          </div>

          {{-- Phone & District --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              @include('components.input-text',['name'=>'phone_number','label'=>'Phone Number'])
            </div>
            <div class="col-sm-6 mb-3">
              <label for="district" class="form-label">District</label>
              <select name="district" id="district" class="form-select">
                <option value="">Select…</option>
                @foreach($districts as $id=>$d)
                  <option value="{{ $id }}" {{ old('district')==$id?'selected':'' }}>{{ $d }}</option>
                @endforeach
              </select>
              @error('district')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
          </div>

          {{-- Disability & sex --}}
          <div class="row">
            <div class="col-sm-6 mb-3">
              <label for="disability" class="form-label">Disability</label>
              <select name="disability" id="disability" class="form-select">
                <option value="">Select…</option>
                @foreach($disabilities as $id=>$name)
                  <option value="{{ $id }}" {{ old('disability')==$id?'selected':'' }}>{{ $name }}</option>
                @endforeach
              </select>
              @error('disability')<div class="text-danger">{{ $message }}</div>@enderror
            </div>
            <div class="col-sm-6 mb-3">
            <label class="form-label">Gender</label><br>
            <label class="me-3">
              <input type="radio" name="sex" value="Male"   {{ old('sex')=='Male'?'checked':'' }}> Male
            </label>
            <label class="me-3">
              <input type="radio" name="sex" value="Female" {{ old('sex')=='Female'?'checked':'' }}> Female
            </label>
            @error('sex')<div class="text-danger">{{ $message }}</div>@enderror
          </div>
          </div>

          {{-- Village --}}
          <div class="mb-3">
            @include('components.input-text',['name'=>'village','label'=>'Village'])
          </div>

          {{-- Date of Birth --}}
          <div class="mb-4">
            @include('components.input-text',[
              'name' => 'dob',
              'type' => 'date',
              'label'=> 'Date of Birth',
            ])
          </div>

          <button type="submit" class="btn btn-primary shadow-primary btn-lg w-100">Sign up</button>
        </form>
      </div>
    </div>
  </section>
</main>
@endsection





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//With Lower-Primary and Upper Primary

<?php

namespace App\Admin\Controllers;

//use App\Admin\Actions\PEOPLE\ImportPeople;

use App\Admin\Actions\PEOPLE\ImportPeople;
use App\Models\Disability;
use App\Models\Organisation;
use App\Models\Person;
use App\Models\Utils;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Show;
use App\Admin\Extensions\PersonsExcelExporter;
use App\Mail\NextOfKin as MailNextOfKin;
use App\Models\District;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use Illuminate\Support\Facades\Mail;
use App\Mail\PwdCreated;
use App\Models\NextOfKin;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Controllers\Dashboard;
use Encore\Admin\Facades\Admin;
// use GuzzleHttp\Psr7\Request;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;
use Illuminate\Validation\Rule;

class PersonController extends AdminController
{
     
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = 'Persons with disabilities';

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {

        $grid = new Grid(new Person());

        $grid->model()->select([
        'id',
        'name',
        'other_names', 
        'phone_number', // Make sure this is included
        'id_number',
        'sex',
        'is_formal_education',
        'age',
        'dob',
        'district_id',
        'profiler',
        'categories',
        'created_at',
        'is_verified',
        
        
       ]);


        $grid->filter(function ($f) {
            // Remove the default id filter
            $f->disableIdFilter();
            $f->between('created_at', 'Filter by registered')->date();

            $f->between('dob', 'Filter by date of birth range')->date();

            $f->equal('profiler', 'Filter by profiler Name')->select(
                Person::whereNotNull('profiler')->orderBy('profiler', 'asc')->pluck('profiler', 'profiler')
            );
        });
        //TODO: fix filters, and also display users from the opd, and district unions
        $user = Admin::user();
        if ($user->inRoles(['basic', 'pwd'])) {
            $grid->actions(function (Grid\Displayers\Actions $actions) {
                $actions->disableEdit();
                $actions->disableDelete();
            });
            $grid->disableCreateButton();
        }

                    // DU-Agents may *create* and *view* only
            if ($user->isRole('du-agent')) {
                $grid->actions(function($actions){
                    $actions->disableEdit();
                    $actions->disableDelete();
                });
                // leave the “New” button enabled
            }


        $grid->filter(function ($filter) {
            // Remove the default id filter
            $filter->disableIdFilter();
            //filter by district, Gender, and disability type
            $filter->equal('district_id', 'Filter by District')
                ->select(District::orderBy('name', 'asc')->get()->pluck('name', 'id'));

            $filter->equal('sex', 'Filter by Gender')->select([
                'Male' => 'Male',
                'Female' => 'Female',
            ]);
            $filter->equal('disabilities.name', 'Disability Name')
                ->select(Disability::pluck('name', 'name'));

            $filter->between('age','Age');
            $filter->equal('is_formal_education','Filter By Formal Education')
                 ->select([

                    'PHD' => 'PHD',
                    'Masters' => 'Master\'s Degree',
                    'Post-Graduate' => 'Post Graduate',
                    'Bachelors' => 'Bachelor\'s Degree',
                    'Diploma' => 'Diploma',
                    'Secondary-UACE' => 'Secondary - UACE',
                    'Secondary-UCE' => 'Secondary - UCE',
                    'Lower Primary'   => 'Lower Primary - PLE',
                    'Upper Primary'   => 'Upper Primary - PLE',

                 ]);
        });

        $grid->quickSearch('name')->placeholder('Search by name');

        //Ogiki
        // $grid->tools(function (Grid\Tools $tools) {
        //     // Add your custom button
        //     $tools->append('<a class="btn btn-success" href="/admin/custom-action"><i class="fa fa-cog"></i> Upload</a>');
        // });
        

        $user = Admin::user();
        $organisation = Organisation::find(Admin::user()->organisation_id);
        if ($user->inRoles(['nudipu', 'administrator'])) {
        $grid->model()->orderBy('created_at', 'desc');

        } elseif ($user->isRole('district-union')) {
            // District‐Union sees only their own district
            $grid->model()
                ->where('district_id', $organisation->district_id)
                ->orderBy('created_at', 'desc');

        } elseif ($user->isRole('du-agent')) {
            // **DU-Agent** gets the identical filter
            $grid->model()
                ->where('district_id', $organisation->district_id)
                ->orderBy('created_at', 'desc');

        } elseif ($user->isRole('opd')) {
            $grid->model()
                ->where('opd_id', $organisation->id)
                ->orderBy('created_at', 'desc');
        }



        $grid->exporter(new PersonsExcelExporter());
       // $grid->import(new ImportPeople());
        
        

         $grid->disableBatchActions();

        // $grid->column('id', __('Id'))->sortable();
        $grid->column('created_at', __('Registered'))->display(
            function ($x) {
                return Utils::my_date($x);
            }
        )->sortable();
        // $grid->column('name', __('Name'))->sortable();   
        // $grid->column('other_names', __('Other Names'))->sortable();
        $grid->column('full_name', __('Full Name'))
        ->display(function () {
            return $this->name . ' ' . $this->other_names;
        })
        ->sortable();
        
        $grid->column('sex', __('Gender'))->sortable();
        $grid->column('education_level', __('Education'))->display(
            function ($education_level) {
                if ($education_level == 'formal Education' || $education_level == 1) {
                    return 'Formal Education';
                } else if ($education_level == 'informal Education') {
                    return "Informal Education";
                } else {
                    return "No Education";
                }
            }
        )
            ->sortable()->hide();
        $grid->column('employment_status', __('Employment Type'))
            ->display(function ($employee_status) {
                if ($employee_status == 'formal employment') {
                    return 'Formal Employment';
                } else if ($employee_status == 'self employment') {
                    return 'Self Employment';
                } else if ($employee_status == 'unemployed') {
                    return 'Unemployed';
                } else {
                    return 'Not mentioned';
                }
            })->sortable()->hide();;
        $grid->column('is_formal_education', __('Formal Education'))->display(
            function ($is_formal_education) {
                $levels = [
                    'PHD' => 'PHD',
                    'Masters' => 'Master\'s Degree',
                    'Post-Graduate' => 'Post Graduate',
                    'Bachelors' => 'Bachelor\'s Degree',
                    'Diploma' => 'Diploma',
                    'Secondary-UACE' => 'Secondary - UACE',
                    'Secondary-UCE' => 'Secondary - UCE',
                    'Lower Primary'   => 'Lower Primary - PLE',
                    'Upper Primary'   => 'Upper Primary - PLE',
                    'Primary'         => 'Lower Primary - PLE',
                ];
                if (array_key_exists($is_formal_education, $levels)) {
                    return $levels[$is_formal_education];
                } else {
                    return 'Not mentioned';
                }
            }
        )->sortable();
        $grid->column('age', __('Age'))->sortable();
        $grid->column('informal_education', __('Informal Education'))->hide();

        $grid->column('district_id', __('Attached District'))->display(
            function ($x) {
                if ($this->district == null) {
                    return '-';
                }
                return $this->district->name;
            }
        )->sortable();

        $grid->column('profiler', __('Profiler'));

        // $grid->column('profiler', __('Profiler'))->display(function ($profiler) {
        //     if (!$profiler) {
        //         return "Self Registered";
        //     } else {
        //         return $profiler;
        //     }
        // });

        $grid->column('disabilities', __('Disabilities'))
            ->display(
                function ($x) {
                    //disabilities in badges
                    if ($this->disabilities()->count() > 0) {
                        $disabilities = $this->disabilities->map(function ($item) {
                            return  $item->name;
                        })->toArray();
                        return join(',', $disabilities);
                    } else {
                        return '-';
                    }
                }
            )->style('max-width:200px;word-break:break-all;')
            ->sortable()
            ->filter('%like%');

            $grid->column('phone_number', __('Phone Number'))
            ->display(function ($num) {
                return $num ?: '-';
            })
            ->sortable()
            ->filter('like')->hide();

            // // only show “Verified” to District-Union users
            if ($user->isRole('district-union')) {
                $grid->column('is_verified', 'Verified')
                    ->using([0 => 'No', 1 => 'Yes'])
                    ->label([0 => 'danger', 1 => 'success'])
                    ->sortable()
                    ->filter([0 => 'No', 1 => 'Yes']);
            }

        // $grid->column('is_approved', __('Approval'))->display(function ($x) {
        //     if ($x == 1) {
        //         return "<span class='badge badge-success'>Yes</span>";
        //     } else {
        //         return "<span class='badge badge-danger'>No</span>";
        //     }
        // });
        
        


        $grid->column('categories_pricessed', __('Processed'))
            ->using(['Yes' => 'Yes', 'No' => 'No'])
            ->label([
                'Yes' => 'success',
                'No' => 'danger',
            ])->sortable()
            ->filter([
                'Yes' => 'Yes',
                'No' => 'No',
            ])->hide();
        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $persons = Person::findOrFail($id);
        $show = new Show($persons);

        return view('admin.persons.show',  [
            'pwd' => $persons
        ]);

        $show->photo()->image();
        $show->field('name', __('Name'));
        $show->field('other_names', __('Other names'));
        $show->field('id_number', __('Id number'));
        $show->field('dob', __('Dob'));
        $show->field('sex', __('Gender'));
        // $show->field('ethnicity', __('Ethnicity'));
        // $show->field('religion', __('Religion'));
        $show->field('place_of_birth', __('Place of birth'));
        $show->field('languages', __('Languages'));
        $show->field('address', __('Address'));

        $show->field('phone_number', __('Phone number'));
        $show->field('email', __('Email'));

        $show->field('next_of_kin_last_name', __('Next of kin last name'));
        $show->field('next_of_kin_other_names', __('Next of kin other names'));
        $show->field('next_of_kin_phone_number', __('Next of kin phone number'));
        $show->field('next_of_kin_id_number', __('Next of kin id number'));
        $show->field('next_of_kin_gender', __('Next of kin gender'));
        $show->field('next_of_kin_email', __('Next of kin email'));
        $show->field('next_of_kin_address', __('Next of kin address'));
        $show->field('next_of_kin_relationship', __('Next of kin relationship'));

        $show->field('skills', __('Skills'));
        $show->field('areas_of_interest', __('Areas of interest'));
        $show->field('aspirations', __('Aspirations'));

        $show->disabilities('Disabilities', function ($disabilities) use ($show) {
            $disabilities->resource('/admin/disabilities');
            // $disabilities->id();
            $disabilities->name();
            $disabilities->description()->limit(0);

            $disabilities->disableCreateButton();
            $disabilities->disableActions();
        });

        $show->affiliated_organisations('Memberships', function ($affiliated_organisations) {
            $affiliated_organisations->resource('/admin/affiliated-organisations');
            $affiliated_organisations->organisation_name();
            $affiliated_organisations->position();
            $affiliated_organisations->Year_of_membership();

            $affiliated_organisations->disableCreateButton();
            $affiliated_organisations->disableActions();
        });

        $show->academic_qualifications('Academic qualifications', function ($academic_qualifications) {
            $academic_qualifications->resource('/admin/academic-qualifications');
            $academic_qualifications->institution();
            $academic_qualifications->qualification();
            $academic_qualifications->year_of_completion();

            $academic_qualifications->disableCreateButton();
            $academic_qualifications->disableActions();
        });

        $show->employment_history('Employment history', function ($employment_history) {
            $employment_history->resource('/admin/employment-history');
            $employment_history->employer();
            $employment_history->position();
            $employment_history->year_of_employment();

            $employment_history->disableCreateButton();
            $employment_history->disableActions();
        });

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
   
    protected function form()
    {
        $form = new Form(new Person());

        $form->footer(function ($footer) {
            $footer->disableReset();
            $footer->disableViewCheck();
            // $footer->disableEditingCheck();
            // $footer->disableCreatingCheck();
            // $footer->disableSubmit();
        });
        $form->divider('Bio Data');
        $form->image('photo', __('Photo'))->uniqueName();
        $form->text('name', __('Surname'))->placeholder('Surname')->rules('required');
        $form->text('other_names', __('Other Names'))->placeholder('Other Names')->rules('required');
        $form->select('sex', __('Gender'))->options(['Male' => 'Male', 'Female' => 'Female'])->rules('required');
        $docxIds = [
        3,   // Deaf
        4,   // Mental Disability
        5,   // Intellectual Disability
        6,   // Acquired Brain Injury
        7,   // Physical Disability
        8,   // Albinism
        9,   // Dwarfism
        10,  // Hard Of Hearing
        11,  // Epilepsy
        12,  // Cerebral (Celebral) Palsy
        13,  // Hydrocephalus
        29,  // Speech Impairment
        54,  // Low vision
        49,  // Partially blind
        52,  // Totally blind
        14,  //Deafblind
        30, //Spina Bifida
    ];

    $form->multipleSelect('disabilities', __('Select disabilities'))
         ->rules('required')
         ->options(
             Disability::whereIn('id', $docxIds)
                 // preserve *that* exact sequence
                 ->orderByRaw('FIELD(id,' . implode(',', $docxIds) . ')')
                 ->pluck('name', 'id')
         );

        $form->date('dob', __('Date of Birth'))->format('DD-MM-YYYY')->placeholder('DD-MM-YYYY');
        $form->number('age', __('Age'))->placeholder('Age')->rules('required')->min(0);
    //    $form->text('phone_number', __('Phone Number'))
    //     ->placeholder('e.g. 0762045035')
    //     // prevent typing more than 10 digits
    //     ->attribute('maxlength', 10)
    //     // hint to mobile browsers / numeric pads
    //     ->attribute('inputmode', 'numeric')
    //     // optional HTML5 pattern to prevent submission in some browsers
    //     ->attribute('pattern', '0[0-9]{9}')
    //     ->rules(function (Form $form) {
    //         $id = $form->model()->id;
    //         $unique = $id
    //             ? Rule::unique('people', 'phone_number')->ignore($id)
    //             : Rule::unique('people', 'phone_number');

    //         return [
    //             'required',
    //             'regex:/^0\d{9}$/',  // exactly 10 digits, starting 0
    //             $unique,
    //         ];
    //     }, [
    //         'required' => 'Phone number is required.',
    //         'regex'    => 'Phone number must be 10 digits starting with 0 (e.g. 0762045035).',
    //         'unique'   => 'This phone number is already registered.',
    //     ]);
        $form->text('phone_number', __('Phone Number'))
            ->placeholder('e.g. 0762045035')
            ->attribute('maxlength', 10)
            ->attribute('inputmode', 'numeric')
            ->attribute('pattern', '0[0-9]{9}')
            ->rules('required|regex:/^0\d{9}$/', [
                'required' => 'Phone number is required.',
                'regex'    => 'Phone number must be 10 digits starting with 0 (e.g. 0762045035).',
            ]);

        $form->email('email', __('Email'))
         ->placeholder('Email (optional)')
         ->creationRules(
             ['nullable','email','unique:people,email'],
             ['unique' => 'The email address is already taken']
         )
         ->updateRules(
             ['nullable','email',"unique:people,email,{{id}},id"],
             ['unique' => 'The email address is already taken']
         );
        $form->divider();
        // 1) First the ID Type radios
        $form->radio('id_type', __('ID Type'))
            ->options([
                'NIN Number'      => 'NIN Number',
                'Driving Permit'  => 'Driving Permit',
                'Passport Number' => 'Passport Number',
            ])
            ->rules('nullable');

        // 2) Then the single id_number field
        $form->text('id_number', __('Identification Number'))
            ->placeholder('Enter the identification number')
            ->creationRules(
                ['nullable','unique:people,id_number'],
                ['unique' => 'The identification number is already used']
            )
            ->updateRules(
                ['nullable',"unique:people,id_number,{{id}},id"],
                ['unique' => 'The identification number is already used']
            );

        $form->select('district_of_origin', __('District of Origin'))->options(District::orderBy('name', 'asc')->get()->pluck('name', 'id'))->rules("required");

        $form->text('sub_county', __('Sub-County'))->placeholder('Enter Sub-County of Origin')->rules('required');
        $form->text('village', __('Village'))->placeholder('Enter village of Origin')->rules('required');

        $user         = Admin::user();
        $organisation = Organisation::find($user->organisation_id);

        // District-Union & DU-Agent: show only their district, but make it unchangeable
        if ($user->isRole('district-union') || $user->isRole('du-agent')) {
            $form->select('district_id', __('District Attached'))
                ->options([
                    $organisation->district_id => optional($organisation->district)->name
                ])
                ->default($organisation->district_id)
                ->rules('required')
                ->readonly(); // makes the field uneditable
        }
        // OPD users: hidden opd_id as before
        elseif ($user->isRole('opd')) {
            $form->hidden('opd_id')->value($organisation->id);
        }
        // Everyone else: full dropdown
        else {
            $form->select('district_id', __('District Attached'))
                ->options(District::pluck('name', 'id'))
                ->placeholder('Select District')
                ->rules('required');
        }

        //if age < 18, then marital status must be disabled
        $form->select('marital_status', __('Marital Status'))->options(
            ['Single' => 'Single', 'Married' => 'Married', 'Divorced' => 'Divorced', 'Widowed' => 'Widowed']
        )->rules('required')->required();
        $form->text('ethnicity', __('Ethnicity'))->help('Your Tribe');
        $form->select('religion', __('Religion'))->options(['Anglican' => 'Anglican', 'Catholic' => 'Catholic', 'Born Again Christian' => 'Born Again Christian', 'Other Christian Faith' => 'Other Christian Faith', 'Islam' => 'Islam']);

        $form->divider('Education');
        $form->select('education_level', __('Education'))->options(
            ['formal Education' => 'Formal Education', 'informal Education' => 'Informal Education', 'no Education' => 'No Education']
        )
            ->when('formal Education', function (Form $form) {
                $form->select('is_formal_education', __('Formal Education'))->options(['PHD' => 'PHD', 'Masters' => 'Masters', 'Post-Graduate' => 'Post Graduate', 'Bachelors' => 'Bachelors', 'Diploma' => 'Ordinary Diploma', 'Secondary-UACE' => 'Secondary-UACE', 'Secondary-UCE' => 'Secondary-UCE', 'Lower Primary'   => 'Lower Primary',
                           'Upper Primary'   => 'Upper Primary',])->rules('required')
                    ->when('PHD', function (Form $form) {
                        $form->text('indicate_class', 'Indicate class')->placeholder('Class');
                    })->when('Masters', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Post-Graduate', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Bachelors', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Diploma', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Secondary-UACE', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Secondary-UCE', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Lower Primary', function (Form $form) {
                        $form->text('indicate_class', 'Indicate class')->placeholder('Class');
                    })
                    ->when('Upper Primary', function (Form $form) {
                        $form->text('indicate_class', 'Indicate class')->placeholder('Class');
                    });
                $form->text('field_of_study', __('Field of Study'));
            })->rules('required')
            ->when('informal Education', function (Form $form) {
                $form->text('informal_education', __('Informal Education'))->placeholder("Enter any informal education forexample: tailoring, carpentry, etc")->rules('required');
            })->rules('required')
            ->default('no Education');


        $form->divider('Skills');

        $form->textarea('skills', __('Skills'))->rows(10)->placeholder("Enter skills forexample: knitting, dancing, teamwork, etc");
        $form->divider();

        /*             $form->html(' <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
                <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>'); */


        $form->radio('is_employed', __('Are you Employed'))->options([1 => 'Yes', 2 => 'No'])->rules('required')
            ->when(1, function (Form $form) {
                $form->radio('employment_status', __('Indicate type of Employment'))->options(['formal employment' => 'Formal Employment', 'self employment' => 'Self Employment'])->rules('required')
                    ->when('formal employment', function (Form $form) {
                        $form->text('position', __('Title'));
                        $form->text('employer', __('Employer Name'));
                        $form->hasMany('employment_history', 'Previous Employment', function (Form\NestedForm $form) {
                            $form->text('employer', __('Employer Name'));
                            $form->text('position', __('Position'))->placeholder("Position");
                            $form->text('year_of_employment', __('Period of service'))->placeholder("2022 - 2023");
                        });
                    })
                    ->when('self employment', function (Form $form) {
                        $form->text('occupation', __('Occupation'))->placeholder('What is your occupation?')->rules('required')->help('e.g Farming, Fishing, Retailer');
                    })->default('formal employment');
            })->default(2)->required()
            ->help("Are you currently employed? or have you ever been employed?");
        $form->divider();
        // /*  $form->html('
        //         <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
        //         <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>
        //     ');
        // });

        $user = auth("admin")->user();
        if (!$user->inRoles(['district-union', 'opd'])) {
            $form->divider('Memberships');
            $form->radio('is_member', __('Membership'))->options([1 => 'Yes', 0 => 'No'])->rules('required')
                ->when(1, function (Form $form) {
                    $form->radio('select_opd_or_du', __('Select '))->options(['opd' => 'OPD', 'du' => 'DU'])
                        ->help("Are you a member of an OPD or DU?")
                        ->when('du', function (Form $form) {
                            $form->select('district_id', __('Select  District'))->options(District::pluck('name', 'id'))->placeholder('Select District')->rules("required")
                                ->help("Select the District where your DU is located");
                        })
                        ->when('opd', function (Form $form) {

                            $form->select('opd_id', __('Select  OPD'))->options(Organisation::where('membership_type', 'individual-based')->where('relationship_type', 'opd')->pluck('name', 'id'))->placeholder('Select an OPD')->rules("required");
                        })
                        ->default('opd');
                    // $form->select('organisation_name', __('Select  DU / OPD'))->options(Organisation::where('membership_type','pwd')->pluck('name','id') )->placeholder('Select an Organisation')->rules("required");

                })
                ->help("Are you currently a member of any association? or have you ever been a member of any association?");
            /* $form->divider();
            $form->html('
                    <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
                    <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>
                    '); */
        }


       
        $form->divider('Next Of Kin');
        $form->html("Click the button below to add next of Kin");
        $form->hasMany('next_of_kins', ' Add New Next of Kin', function (Form\NestedForm $form) {
            $form->text('next_of_kin_last_name', __('Surname'))->rules('required');
            $form->text('next_of_kin_other_names', __('Other Names'))->rules('required');
            $form->radio('next_of_kin_gender', __('Gender'))->options(['Male' => 'Male', 'Female' => 'Female'])->rules('required');
            $form->text('next_of_kin_phone_number', __('Phone Number'))->rules('required');
            $form->text('next_of_kin_alternative_phone_number', __('Alternative Phone Number'));
            $form->email('next_of_kin_email', __('Email'));
            $form->text('next_of_kin_relationship', __('Relationship'))->rules('required');
            $form->text('next_of_kin_address', __('Address'))->rules('required');
        });
        /*  $form->divider();
        $form->html('
            <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
                <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>
            '); */
        $form->divider('Aspirations');
        $form->quill('aspirations', __('Aspirations'));
        $form->text('profiler', __('Profiler'))
                    ->placeholder('Enter the name of the profiler')
                    ->help('Enter the name of the profiler')
                    ->rules('required');


      if ($user->isRole('district-union')) {
            // Editable switch for DUs
            $form->switch('is_verified', 'Verified')->states([
                'on'  => ['value' => 1, 'text' => 'Yes', 'color' => 'success'],
                'off' => ['value' => 0, 'text' => 'No',  'color' => 'danger'],
                    ]);
                } else {
                    // Non-DUs see a dynamic read-only badge
                    $form->ignore(['is_verified']);
                    $form->html(function (Form $form) {
                        $v     = $form->model()->is_verified;
                        $class = $v ? 'bg-success' : 'bg-danger';
                        $text  = $v ? 'Yes'         : 'No';
                        return "<span class='badge {$class}'>{$text}</span>";
                    }, 'Verified');
                }


            // Email PWD on DU approval
            $form->saved(function (Form $form) {
                if ($form->isEditing()) {
                    $orig = $form->model()->getOriginal('is_verified');
                    $now  = $form->model()->is_verified;
                    if ($orig == 0 && $now == 1) {
                        Mail::to($form->model()->email)
                            ->send(new \App\Mail\PwdVerified($form->model()));
                    }
                }
            });
        // if (!$user->inRoles(['district-union', 'opd'])) {
        //     $form->html('
        // <button type="submit" class="btn btn-primary float-right">Submit</button>');
        // }


        if (Admin::user()->inRoles(['district-union', 'opd'])) {
            $form->tab('Profiler Name', function ($form) {
                // $form->text('profiler', __('Profiler'))
                //     ->placeholder('Enter your name as a profiler')
                //     ->help('Enter your name as a profiler')
                //     ->rules('required');


               if (Admin::user()->isRole('opd')) {
                        $org = Organisation::find(Admin::user()->organisation_id);
                        $form->select('district_id', __('Select Profiled District'))
                            ->options(District::orderBy('name','asc')->pluck('name','id'))
                            ->default($org->district_id)    // pre-select their “home” district
                            ->rules('required');
                    }
                $form->divider();
                //Add submit button
                // $form->html('
                //         <button type="submit" class="btn btn-primary float-right">Submit</button>');
            });
        }

        $form->saving(function (Form $form) {
        $name       = ucfirst(strtolower($form->input('name')));
        $otherNames = ucfirst(strtolower($form->input('other_names')));
        $sex        = $form->input('sex');
        $age        = $form->input('age');

        $query = Person::where('name',        $name)
                       ->where('other_names', $otherNames)
                       ->where('sex',         $sex)
                       ->where('age',         $age);

        if ($id = $form->model()->id) {
            $query->where('id', '!=', $id);
        }

        if ($query->exists()) {
            // Build a “blank” validator so we can attach a custom error
            $validator = Validator::make([], []);
            // Build a multi-line message
                $message = implode("\n", [
                    'A person named “' . $name . ' ' . $otherNames . '”',
                    ',', 
                    'Gender: ' . ucfirst($sex) ,
                    'And  '.' ',
                    'Age: ' . $age . ' ',
                    'already exists. Please edit that record instead.'
                ]);

                // Attach the error to the 'name' field
                $validator->errors()->add('name', $message);
            // Throw as a validation exception — Laravel-Admin will catch this
            // and display it as a nice red banner + field error, then keep you
            // on the form with all your input intact.
            throw new ValidationException($validator);
        }
    });

        // Check if district union is doing the registration and send credentials else do not send
        if (auth("admin")->user()->inRoles(['district-union', 'opd'])) {
            $form->saving(function ($form) {
                // save the admin in users and map to this du
                if ($form->isCreating()) {
                    //generate random password for user and send it to the user's email
                    $alpha_list = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz1234567890';
                    $password = substr(str_shuffle($alpha_list), 0, 8);
                    //TODO: check if email was given, if not consider next_of_kin else no account
                    if ($form->email != null) {
                        $pwd_email = $form->email;
                        $new_password = $password;
                        $password = Hash::make($password);
                        //check if user exists
                        $admin = User::where('email', $pwd_email)->first();
                        if ($admin == null) {
                            $admin = User::create([
                                'username' => $pwd_email,
                                'email' => $form->pwd_email,
                                'password' => $password,
                                'first_name' => $form->other_names,
                                'last_name' => $form->name,
                                'gender' => $form->sex,
                                'avatar' => $form->photo
                            ]);
                            $admin->assignRole('pwd');
                        }
                        session(['password' => $new_password]);
                    } else {
                        //TODO: Send user has no email
                    }

                    $form->is_approved = 1; //Approve if registered by an organisation
                    $current_user = auth("admin")->user();
                    $organisation = Organisation::find($current_user->organisation_id);
                    error_log("Organisation: " . $organisation->name);

                    if ($organisation == null) {
                        //return error
                        return back()->with('error', 'You do not have an organisation to register a member under');
                    } else if ($organisation && $organisation->relationship_type == 'du') {
                        $form->district_id = $organisation->district_id;
                    } else if ($organisation && $organisation->relationship_type == 'opd') {
                        $form->opd_id = $current_user->organisation_id;
                    }
                }
                try {
                    // Manually invoke the addPerson method to check for duplicates
                    if ($form->isCreating()) {
                        $person = new Person($form->model()->toArray());
                        $person->addPerson(request());
                    }
                } catch (\Exception $e) {
                    // Catch the exception and display an error message
                    admin_toastr($e->getMessage(), 'error');
                    return back()->withInput()->withErrors(['name' => $e->getMessage()]);
                }
            });
            //If user registers themselves, then information must be sent to du admin for approval
            $form->saved(function (Form $form) {
                if ($form->isCreating()) {
                    $user_password = session('password');
                    error_log("Password: " . $user_password);
                    error_log("Email: " . $form->email);


                    if ($user_password != null) {

                        if ($form->email != null) {
                            Mail::to($form->email)->send(new PwdCreated($form->email, $user_password));
                        } else {
                           if (! empty($form->next_of_kin_email)) {
                                Mail::to($form->next_of_kin_email)
                                    ->send(new MailNextOfKin(
                                        "{$form->name} {$form->other_names}", // full name
                                        $form->next_of_kin_email,            // guaranteed string
                                        session('password')                  // or $user_password
                                    ));
                            }
                        }
                    }
                }
            });
        }


        Admin::script(
            <<<EOT
            $(document).ready(function() {
                $('.btn-next').click(function() {
                    $('.nav-tabs > .active').next('li').find('a').trigger('click');
                });
                $('.btn-prev').click(function() {
                    $('.nav-tabs > .active').prev('li').find('a').trigger('click');
                });
            });
            EOT
        );

        //Ogiki Moses
        Admin::script(<<<'JS'
            $(function(){
                function updateIdLabel() {
                    var type = $('input[name="id_type"]:checked').val() || 'Identification Number';
                    $('label[for="id_number"]').text(type);
                }
                // on page load
                updateIdLabel();
                // whenever user picks a different ID Type
                $('input[name="id_type"]').on('change', updateIdLabel);
            });
        JS
        );



        


        return $form;
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////
/////////////////////////
//////////////////////////

Without Lower and Upper Primary


<?php

namespace App\Admin\Controllers;

//use App\Admin\Actions\PEOPLE\ImportPeople;

use App\Admin\Actions\PEOPLE\ImportPeople;
use App\Models\Disability;
use App\Models\Organisation;
use App\Models\Person;
use App\Models\Utils;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Show;
use App\Admin\Extensions\PersonsExcelExporter;
use App\Mail\NextOfKin as MailNextOfKin;
use App\Models\District;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use Illuminate\Support\Facades\Mail;
use App\Mail\PwdCreated;
use App\Models\NextOfKin;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Controllers\Dashboard;
use Encore\Admin\Facades\Admin;
// use GuzzleHttp\Psr7\Request;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;
use Illuminate\Validation\Rule;

class PersonController extends AdminController
{
     
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = 'Persons with disabilities';

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {

        $grid = new Grid(new Person());

        $grid->model()->select([
        'id',
        'name',
        'other_names', 
        'phone_number', // Make sure this is included
        'id_number',
        'sex',
        'is_formal_education',
        'age',
        'dob',
        'district_id',
        'profiler',
        'categories',
        'created_at',
        'is_verified',
        
        
       ]);


        $grid->filter(function ($f) {
            // Remove the default id filter
            $f->disableIdFilter();
            $f->between('created_at', 'Filter by registered')->date();

            $f->between('dob', 'Filter by date of birth range')->date();

            $f->equal('profiler', 'Filter by profiler Name')->select(
                Person::whereNotNull('profiler')->orderBy('profiler', 'asc')->pluck('profiler', 'profiler')
            );
        });
        //TODO: fix filters, and also display users from the opd, and district unions
        $user = Admin::user();
        if ($user->inRoles(['basic', 'pwd'])) {
            $grid->actions(function (Grid\Displayers\Actions $actions) {
                $actions->disableEdit();
                $actions->disableDelete();
            });
            $grid->disableCreateButton();
        }

                    // DU-Agents may *create* and *view* only
            if ($user->isRole('du-agent')) {
                $grid->actions(function($actions){
                    $actions->disableEdit();
                    $actions->disableDelete();
                });
                // leave the “New” button enabled
            }


        $grid->filter(function ($filter) {
            // Remove the default id filter
            $filter->disableIdFilter();
            //filter by district, Gender, and disability type
            $filter->equal('district_id', 'Filter by District')
                ->select(District::orderBy('name', 'asc')->get()->pluck('name', 'id'));

            $filter->equal('sex', 'Filter by Gender')->select([
                'Male' => 'Male',
                'Female' => 'Female',
            ]);
            $filter->equal('disabilities.name', 'Disability Name')
                ->select(Disability::pluck('name', 'name'));

            $filter->between('age','Age');
            $filter->equal('is_formal_education','Filter By Formal Education')
                 ->select([

                    'PHD' => 'PHD',
                    'Masters' => 'Master\'s Degree',
                    'Post-Graduate' => 'Post Graduate',
                    'Bachelors' => 'Bachelor\'s Degree',
                    'Diploma' => 'Diploma',
                    'Secondary-UACE' => 'Secondary - UACE',
                    'Secondary-UCE' => 'Secondary - UCE',
                    'Primary' => 'Primary - PLE',

                 ]);
        });

        $grid->quickSearch('name')->placeholder('Search by name');

        //Ogiki
        // $grid->tools(function (Grid\Tools $tools) {
        //     // Add your custom button
        //     $tools->append('<a class="btn btn-success" href="/admin/custom-action"><i class="fa fa-cog"></i> Upload</a>');
        // });
        

        $user = Admin::user();
        $organisation = Organisation::find(Admin::user()->organisation_id);
        if ($user->inRoles(['nudipu', 'administrator'])) {
        $grid->model()->orderBy('created_at', 'desc');

        } elseif ($user->isRole('district-union')) {
            // District‐Union sees only their own district
            $grid->model()
                ->where('district_id', $organisation->district_id)
                ->orderBy('created_at', 'desc');

        } elseif ($user->isRole('du-agent')) {
            // **DU-Agent** gets the identical filter
            $grid->model()
                ->where('district_id', $organisation->district_id)
                ->orderBy('created_at', 'desc');

        } elseif ($user->isRole('opd')) {
            $grid->model()
                ->where('opd_id', $organisation->id)
                ->orderBy('created_at', 'desc');
        }



        $grid->exporter(new PersonsExcelExporter());
       // $grid->import(new ImportPeople());
        
        

         $grid->disableBatchActions();

        // $grid->column('id', __('Id'))->sortable();
        $grid->column('created_at', __('Registered'))->display(
            function ($x) {
                return Utils::my_date($x);
            }
        )->sortable();
        // $grid->column('name', __('Name'))->sortable();   
        // $grid->column('other_names', __('Other Names'))->sortable();
        $grid->column('full_name', __('Full Name'))
        ->display(function () {
            return $this->name . ' ' . $this->other_names;
        })
        ->sortable();
        
        $grid->column('sex', __('Gender'))->sortable();
        $grid->column('education_level', __('Education'))->display(
            function ($education_level) {
                if ($education_level == 'formal Education' || $education_level == 1) {
                    return 'Formal Education';
                } else if ($education_level == 'informal Education') {
                    return "Informal Education";
                } else {
                    return "No Education";
                }
            }
        )
            ->sortable()->hide();
        $grid->column('employment_status', __('Employment Type'))
            ->display(function ($employee_status) {
                if ($employee_status == 'formal employment') {
                    return 'Formal Employment';
                } else if ($employee_status == 'self employment') {
                    return 'Self Employment';
                } else if ($employee_status == 'unemployed') {
                    return 'Unemployed';
                } else {
                    return 'Not mentioned';
                }
            })->sortable()->hide();;
        $grid->column('is_formal_education', __('Formal Education'))->display(
            function ($is_formal_education) {
                $levels = [
                    'PHD' => 'PHD',
                    'Masters' => 'Master\'s Degree',
                    'Post-Graduate' => 'Post Graduate',
                    'Bachelors' => 'Bachelor\'s Degree',
                    'Diploma' => 'Diploma',
                    'Secondary-UACE' => 'Secondary - UACE',
                    'Secondary-UCE' => 'Secondary - UCE',
                    'Primary' => 'Primary - PLE',
                ];
                if (array_key_exists($is_formal_education, $levels)) {
                    return $levels[$is_formal_education];
                } else {
                    return 'Not mentioned';
                }
            }
        )->sortable();
        $grid->column('age', __('Age'))->sortable();
        $grid->column('informal_education', __('Informal Education'))->hide();

        $grid->column('district_id', __('Attached District'))->display(
            function ($x) {
                if ($this->district == null) {
                    return '-';
                }
                return $this->district->name;
            }
        )->sortable();

        $grid->column('profiler', __('Profiler'));

        // $grid->column('profiler', __('Profiler'))->display(function ($profiler) {
        //     if (!$profiler) {
        //         return "Self Registered";
        //     } else {
        //         return $profiler;
        //     }
        // });

        $grid->column('disabilities', __('Disabilities'))
            ->display(
                function ($x) {
                    //disabilities in badges
                    if ($this->disabilities()->count() > 0) {
                        $disabilities = $this->disabilities->map(function ($item) {
                            return  $item->name;
                        })->toArray();
                        return join(',', $disabilities);
                    } else {
                        return '-';
                    }
                }
            )->style('max-width:200px;word-break:break-all;')
            ->sortable()
            ->filter('%like%');

            $grid->column('phone_number', __('Phone Number'))
            ->display(function ($num) {
                return $num ?: '-';
            })
            ->sortable()
            ->filter('like')->hide();

            // // only show “Verified” to District-Union users
            if ($user->isRole('district-union')) {
                $grid->column('is_verified', 'Verified')
                    ->using([0 => 'No', 1 => 'Yes'])
                    ->label([0 => 'danger', 1 => 'success'])
                    ->sortable()
                    ->filter([0 => 'No', 1 => 'Yes']);
            }

        // $grid->column('is_approved', __('Approval'))->display(function ($x) {
        //     if ($x == 1) {
        //         return "<span class='badge badge-success'>Yes</span>";
        //     } else {
        //         return "<span class='badge badge-danger'>No</span>";
        //     }
        // });
        
        


        $grid->column('categories_pricessed', __('Processed'))
            ->using(['Yes' => 'Yes', 'No' => 'No'])
            ->label([
                'Yes' => 'success',
                'No' => 'danger',
            ])->sortable()
            ->filter([
                'Yes' => 'Yes',
                'No' => 'No',
            ])->hide();
        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $persons = Person::findOrFail($id);
        $show = new Show($persons);

        return view('admin.persons.show',  [
            'pwd' => $persons
        ]);

        $show->photo()->image();
        $show->field('name', __('Name'));
        $show->field('other_names', __('Other names'));
        $show->field('id_number', __('Id number'));
        $show->field('dob', __('Dob'));
        $show->field('sex', __('Gender'));
        // $show->field('ethnicity', __('Ethnicity'));
        // $show->field('religion', __('Religion'));
        $show->field('place_of_birth', __('Place of birth'));
        $show->field('languages', __('Languages'));
        $show->field('address', __('Address'));

        $show->field('phone_number', __('Phone number'));
        $show->field('email', __('Email'));

        $show->field('next_of_kin_last_name', __('Next of kin last name'));
        $show->field('next_of_kin_other_names', __('Next of kin other names'));
        $show->field('next_of_kin_phone_number', __('Next of kin phone number'));
        $show->field('next_of_kin_id_number', __('Next of kin id number'));
        $show->field('next_of_kin_gender', __('Next of kin gender'));
        $show->field('next_of_kin_email', __('Next of kin email'));
        $show->field('next_of_kin_address', __('Next of kin address'));
        $show->field('next_of_kin_relationship', __('Next of kin relationship'));

        $show->field('skills', __('Skills'));
        $show->field('areas_of_interest', __('Areas of interest'));
        $show->field('aspirations', __('Aspirations'));

        $show->disabilities('Disabilities', function ($disabilities) use ($show) {
            $disabilities->resource('/admin/disabilities');
            // $disabilities->id();
            $disabilities->name();
            $disabilities->description()->limit(0);

            $disabilities->disableCreateButton();
            $disabilities->disableActions();
        });

        $show->affiliated_organisations('Memberships', function ($affiliated_organisations) {
            $affiliated_organisations->resource('/admin/affiliated-organisations');
            $affiliated_organisations->organisation_name();
            $affiliated_organisations->position();
            $affiliated_organisations->Year_of_membership();

            $affiliated_organisations->disableCreateButton();
            $affiliated_organisations->disableActions();
        });

        $show->academic_qualifications('Academic qualifications', function ($academic_qualifications) {
            $academic_qualifications->resource('/admin/academic-qualifications');
            $academic_qualifications->institution();
            $academic_qualifications->qualification();
            $academic_qualifications->year_of_completion();

            $academic_qualifications->disableCreateButton();
            $academic_qualifications->disableActions();
        });

        $show->employment_history('Employment history', function ($employment_history) {
            $employment_history->resource('/admin/employment-history');
            $employment_history->employer();
            $employment_history->position();
            $employment_history->year_of_employment();

            $employment_history->disableCreateButton();
            $employment_history->disableActions();
        });

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
   
    protected function form()
    {
        $form = new Form(new Person());

        $form->footer(function ($footer) {
            $footer->disableReset();
            $footer->disableViewCheck();
            // $footer->disableEditingCheck();
            // $footer->disableCreatingCheck();
            // $footer->disableSubmit();
        });
        $form->divider('Bio Data');
        $form->image('photo', __('Photo'))->uniqueName();
        $form->text('name', __('Surname'))->placeholder('Surname')->rules('required');
        $form->text('other_names', __('Other Names'))->placeholder('Other Names')->rules('required');
        $form->select('sex', __('Gender'))->options(['Male' => 'Male', 'Female' => 'Female'])->rules('required');
        $docxIds = [
        3,   // Deaf
        4,   // Mental Disability
        5,   // Intellectual Disability
        6,   // Acquired Brain Injury
        7,   // Physical Disability
        8,   // Albinism
        9,   // Dwarfism
        10,  // Hard Of Hearing
        11,  // Epilepsy
        12,  // Cerebral (Celebral) Palsy
        13,  // Hydrocephalus
        29,  // Speech Impairment
        54,  // Low vision
        49,  // Partially blind
        52,  // Totally blind
        14,  //Deafblind
        30, //Spina Bifida
    ];

    $form->multipleSelect('disabilities', __('Select disabilities'))
         ->rules('required')
         ->options(
             Disability::whereIn('id', $docxIds)
                 // preserve *that* exact sequence
                 ->orderByRaw('FIELD(id,' . implode(',', $docxIds) . ')')
                 ->pluck('name', 'id')
         );

        $form->date('dob', __('Date of Birth'))->format('DD-MM-YYYY')->placeholder('DD-MM-YYYY');
        $form->number('age', __('Age'))->placeholder('Age')->rules('required')->min(0);
    //    $form->text('phone_number', __('Phone Number'))
    //     ->placeholder('e.g. 0762045035')
    //     // prevent typing more than 10 digits
    //     ->attribute('maxlength', 10)
    //     // hint to mobile browsers / numeric pads
    //     ->attribute('inputmode', 'numeric')
    //     // optional HTML5 pattern to prevent submission in some browsers
    //     ->attribute('pattern', '0[0-9]{9}')
    //     ->rules(function (Form $form) {
    //         $id = $form->model()->id;
    //         $unique = $id
    //             ? Rule::unique('people', 'phone_number')->ignore($id)
    //             : Rule::unique('people', 'phone_number');

    //         return [
    //             'required',
    //             'regex:/^0\d{9}$/',  // exactly 10 digits, starting 0
    //             $unique,
    //         ];
    //     }, [
    //         'required' => 'Phone number is required.',
    //         'regex'    => 'Phone number must be 10 digits starting with 0 (e.g. 0762045035).',
    //         'unique'   => 'This phone number is already registered.',
    //     ]);
        $form->text('phone_number', __('Phone Number'))
            ->placeholder('e.g. 0762045035')
            ->attribute('maxlength', 10)
            ->attribute('inputmode', 'numeric')
            ->attribute('pattern', '0[0-9]{9}')
            ->rules('required|regex:/^0\d{9}$/', [
                'required' => 'Phone number is required.',
                'regex'    => 'Phone number must be 10 digits starting with 0 (e.g. 0762045035).',
            ]);

        $form->email('email', __('Email'))
         ->placeholder('Email (optional)')
         ->creationRules(
             ['nullable','email','unique:people,email'],
             ['unique' => 'The email address is already taken']
         )
         ->updateRules(
             ['nullable','email',"unique:people,email,{{id}},id"],
             ['unique' => 'The email address is already taken']
         );
        $form->divider();
        // 1) First the ID Type radios
        $form->radio('id_type', __('ID Type'))
            ->options([
                'NIN Number'      => 'NIN Number',
                'Driving Permit'  => 'Driving Permit',
                'Passport Number' => 'Passport Number',
            ])
            ->rules('nullable');

        // 2) Then the single id_number field
        $form->text('id_number', __('Identification Number'))
            ->placeholder('Enter the identification number')
            ->creationRules(
                ['nullable','unique:people,id_number'],
                ['unique' => 'The identification number is already used']
            )
            ->updateRules(
                ['nullable',"unique:people,id_number,{{id}},id"],
                ['unique' => 'The identification number is already used']
            );

        $form->select('district_of_origin', __('District of Origin'))->options(District::orderBy('name', 'asc')->get()->pluck('name', 'id'))->rules("required");

        $form->text('sub_county', __('Sub-County'))->placeholder('Enter Sub-County of Origin')->rules('required');
        $form->text('village', __('Village'))->placeholder('Enter village of Origin')->rules('required');

        $user         = Admin::user();
        $organisation = Organisation::find($user->organisation_id);

        // District-Union & DU-Agent: show only their district, but make it unchangeable
        if ($user->isRole('district-union') || $user->isRole('du-agent')) {
            $form->select('district_id', __('District Attached'))
                ->options([
                    $organisation->district_id => optional($organisation->district)->name
                ])
                ->default($organisation->district_id)
                ->rules('required')
                ->readonly(); // makes the field uneditable
        }
        // OPD users: hidden opd_id as before
        elseif ($user->isRole('opd')) {
            $form->hidden('opd_id')->value($organisation->id);
        }
        // Everyone else: full dropdown
        else {
            $form->select('district_id', __('District Attached'))
                ->options(District::pluck('name', 'id'))
                ->placeholder('Select District')
                ->rules('required');
        }

        //if age < 18, then marital status must be disabled
        $form->select('marital_status', __('Marital Status'))->options(
            ['Single' => 'Single', 'Married' => 'Married', 'Divorced' => 'Divorced', 'Widowed' => 'Widowed']
        )->rules('required')->required();
        $form->text('ethnicity', __('Ethnicity'))->help('Your Tribe');
        $form->select('religion', __('Religion'))->options(['Anglican' => 'Anglican', 'Catholic' => 'Catholic', 'Born Again Christian' => 'Born Again Christian', 'Other Christian Faith' => 'Other Christian Faith', 'Islam' => 'Islam']);

        $form->divider('Education');
        $form->select('education_level', __('Education'))->options(
            ['formal Education' => 'Formal Education', 'informal Education' => 'Informal Education', 'no Education' => 'No Education']
        )
            ->when('formal Education', function (Form $form) {
                $form->select('is_formal_education', __('Formal Education'))->options(['PHD' => 'PHD', 'Masters' => 'Masters', 'Post-Graduate' => 'Post Graduate', 'Bachelors' => 'Bachelors', 'Diploma' => 'Ordinary Diploma', 'Secondary-UACE' => 'Secondary-UACE', 'Secondary-UCE' => 'Secondary-UCE', 'Primary' => 'Primary'])->rules('required')
                    ->when('PHD', function (Form $form) {
                        $form->text('indicate_class', 'Indicate class')->placeholder('Class');
                    })->when('Masters', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Post-Graduate', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Bachelors', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Diploma', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Secondary-UACE', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Secondary-UCE', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    })->when('Primary', function (Form $form) {
                        $form->text('indicate_class', __('Indicate class'))->placeholder('Class');
                    });
                $form->text('field_of_study', __('Field of Study'));
            })->rules('required')
            ->when('informal Education', function (Form $form) {
                $form->text('informal_education', __('Informal Education'))->placeholder("Enter any informal education forexample: tailoring, carpentry, etc")->rules('required');
            })->rules('required')
            ->default('no Education');


        $form->divider('Skills');

        $form->textarea('skills', __('Skills'))->rows(10)->placeholder("Enter skills forexample: knitting, dancing, teamwork, etc");
        $form->divider();

        /*             $form->html(' <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
                <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>'); */


        $form->radio('is_employed', __('Are you Employed'))->options([1 => 'Yes', 2 => 'No'])->rules('required')
            ->when(1, function (Form $form) {
                $form->radio('employment_status', __('Indicate type of Employment'))->options(['formal employment' => 'Formal Employment', 'self employment' => 'Self Employment'])->rules('required')
                    ->when('formal employment', function (Form $form) {
                        $form->text('position', __('Title'));
                        $form->text('employer', __('Employer Name'));
                        $form->hasMany('employment_history', 'Previous Employment', function (Form\NestedForm $form) {
                            $form->text('employer', __('Employer Name'));
                            $form->text('position', __('Position'))->placeholder("Position");
                            $form->text('year_of_employment', __('Period of service'))->placeholder("2022 - 2023");
                        });
                    })
                    ->when('self employment', function (Form $form) {
                        $form->text('occupation', __('Occupation'))->placeholder('What is your occupation?')->rules('required')->help('e.g Farming, Fishing, Retailer');
                    })->default('formal employment');
            })->default(2)->required()
            ->help("Are you currently employed? or have you ever been employed?");
        $form->divider();
        // /*  $form->html('
        //         <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
        //         <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>
        //     ');
        // });

        $user = auth("admin")->user();
        if (!$user->inRoles(['district-union', 'opd'])) {
            $form->divider('Memberships');
            $form->radio('is_member', __('Membership'))->options([1 => 'Yes', 0 => 'No'])->rules('required')
                ->when(1, function (Form $form) {
                    $form->radio('select_opd_or_du', __('Select '))->options(['opd' => 'OPD', 'du' => 'DU'])
                        ->help("Are you a member of an OPD or DU?")
                        ->when('du', function (Form $form) {
                            $form->select('district_id', __('Select  District'))->options(District::pluck('name', 'id'))->placeholder('Select District')->rules("required")
                                ->help("Select the District where your DU is located");
                        })
                        ->when('opd', function (Form $form) {

                            $form->select('opd_id', __('Select  OPD'))->options(Organisation::where('membership_type', 'individual-based')->where('relationship_type', 'opd')->pluck('name', 'id'))->placeholder('Select an OPD')->rules("required");
                        })
                        ->default('opd');
                    // $form->select('organisation_name', __('Select  DU / OPD'))->options(Organisation::where('membership_type','pwd')->pluck('name','id') )->placeholder('Select an Organisation')->rules("required");

                })
                ->help("Are you currently a member of any association? or have you ever been a member of any association?");
            /* $form->divider();
            $form->html('
                    <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
                    <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>
                    '); */
        }


       
        $form->divider('Next Of Kin');
        $form->html("Click the button below to add next of Kin");
        $form->hasMany('next_of_kins', ' Add New Next of Kin', function (Form\NestedForm $form) {
            $form->text('next_of_kin_last_name', __('Surname'))->rules('required');
            $form->text('next_of_kin_other_names', __('Other Names'))->rules('required');
            $form->radio('next_of_kin_gender', __('Gender'))->options(['Male' => 'Male', 'Female' => 'Female'])->rules('required');
            $form->text('next_of_kin_phone_number', __('Phone Number'))->rules('required');
            $form->text('next_of_kin_alternative_phone_number', __('Alternative Phone Number'));
            $form->email('next_of_kin_email', __('Email'));
            $form->text('next_of_kin_relationship', __('Relationship'))->rules('required');
            $form->text('next_of_kin_address', __('Address'))->rules('required');
        });
        /*  $form->divider();
        $form->html('
            <a type="button" class="btn btn-info btn-prev float-left" data-toggle="tab" aria-expanded="true">Previous</a>
                <a type="button" class="btn btn-primary btn-next float-right" data-toggle="tab" aria-expanded="true">Next</a>
            '); */
        $form->divider('Aspirations');
        $form->quill('aspirations', __('Aspirations'));
        $form->text('profiler', __('Profiler'))
                    ->placeholder('Enter the name of the profiler')
                    ->help('Enter the name of the profiler')
                    ->rules('required');


      if ($user->isRole('district-union')) {
            // Editable switch for DUs
            $form->switch('is_verified', 'Verified')->states([
                'on'  => ['value' => 1, 'text' => 'Yes', 'color' => 'success'],
                'off' => ['value' => 0, 'text' => 'No',  'color' => 'danger'],
                    ]);
                } else {
                    // Non-DUs see a dynamic read-only badge
                    $form->ignore(['is_verified']);
                    $form->html(function (Form $form) {
                        $v     = $form->model()->is_verified;
                        $class = $v ? 'bg-success' : 'bg-danger';
                        $text  = $v ? 'Yes'         : 'No';
                        return "<span class='badge {$class}'>{$text}</span>";
                    }, 'Verified');
                }


            // Email PWD on DU approval
            $form->saved(function (Form $form) {
                if ($form->isEditing()) {
                    $orig = $form->model()->getOriginal('is_verified');
                    $now  = $form->model()->is_verified;
                    if ($orig == 0 && $now == 1) {
                        Mail::to($form->model()->email)
                            ->send(new \App\Mail\PwdVerified($form->model()));
                    }
                }
            });
        // if (!$user->inRoles(['district-union', 'opd'])) {
        //     $form->html('
        // <button type="submit" class="btn btn-primary float-right">Submit</button>');
        // }


        if (Admin::user()->inRoles(['district-union', 'opd'])) {
            $form->tab('Profiler Name', function ($form) {
                // $form->text('profiler', __('Profiler'))
                //     ->placeholder('Enter your name as a profiler')
                //     ->help('Enter your name as a profiler')
                //     ->rules('required');


               if (Admin::user()->isRole('opd')) {
                        $org = Organisation::find(Admin::user()->organisation_id);
                        $form->select('district_id', __('Select Profiled District'))
                            ->options(District::orderBy('name','asc')->pluck('name','id'))
                            ->default($org->district_id)    // pre-select their “home” district
                            ->rules('required');
                    }
                $form->divider();
                //Add submit button
                // $form->html('
                //         <button type="submit" class="btn btn-primary float-right">Submit</button>');
            });
        }

        $form->saving(function (Form $form) {
        $name       = ucfirst(strtolower($form->input('name')));
        $otherNames = ucfirst(strtolower($form->input('other_names')));
        $sex        = $form->input('sex');
        $age        = $form->input('age');

        $query = Person::where('name',        $name)
                       ->where('other_names', $otherNames)
                       ->where('sex',         $sex)
                       ->where('age',         $age);

        if ($id = $form->model()->id) {
            $query->where('id', '!=', $id);
        }

        if ($query->exists()) {
            // Build a “blank” validator so we can attach a custom error
            $validator = Validator::make([], []);
            // Build a multi-line message
                $message = implode("\n", [
                    'A person named “' . $name . ' ' . $otherNames . '”',
                    ',', 
                    'Gender: ' . ucfirst($sex) ,
                    'And  '.' ',
                    'Age: ' . $age . ' ',
                    'already exists. Please edit that record instead.'
                ]);

                // Attach the error to the 'name' field
                $validator->errors()->add('name', $message);
            // Throw as a validation exception — Laravel-Admin will catch this
            // and display it as a nice red banner + field error, then keep you
            // on the form with all your input intact.
            throw new ValidationException($validator);
        }
    });

        // Check if district union is doing the registration and send credentials else do not send
        if (auth("admin")->user()->inRoles(['district-union', 'opd'])) {
            $form->saving(function ($form) {
                // save the admin in users and map to this du
                if ($form->isCreating()) {
                    //generate random password for user and send it to the user's email
                    $alpha_list = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz1234567890';
                    $password = substr(str_shuffle($alpha_list), 0, 8);
                    //TODO: check if email was given, if not consider next_of_kin else no account
                    if ($form->email != null) {
                        $pwd_email = $form->email;
                        $new_password = $password;
                        $password = Hash::make($password);
                        //check if user exists
                        $admin = User::where('email', $pwd_email)->first();
                        if ($admin == null) {
                            $admin = User::create([
                                'username' => $pwd_email,
                                'email' => $form->pwd_email,
                                'password' => $password,
                                'first_name' => $form->other_names,
                                'last_name' => $form->name,
                                'gender' => $form->sex,
                                'avatar' => $form->photo
                            ]);
                            $admin->assignRole('pwd');
                        }
                        session(['password' => $new_password]);
                    } else {
                        //TODO: Send user has no email
                    }

                    $form->is_approved = 1; //Approve if registered by an organisation
                    $current_user = auth("admin")->user();
                    $organisation = Organisation::find($current_user->organisation_id);
                    error_log("Organisation: " . $organisation->name);

                    if ($organisation == null) {
                        //return error
                        return back()->with('error', 'You do not have an organisation to register a member under');
                    } else if ($organisation && $organisation->relationship_type == 'du') {
                        $form->district_id = $organisation->district_id;
                    } else if ($organisation && $organisation->relationship_type == 'opd') {
                        $form->opd_id = $current_user->organisation_id;
                    }
                }
                try {
                    // Manually invoke the addPerson method to check for duplicates
                    if ($form->isCreating()) {
                        $person = new Person($form->model()->toArray());
                        $person->addPerson(request());
                    }
                } catch (\Exception $e) {
                    // Catch the exception and display an error message
                    admin_toastr($e->getMessage(), 'error');
                    return back()->withInput()->withErrors(['name' => $e->getMessage()]);
                }
            });
            //If user registers themselves, then information must be sent to du admin for approval
            $form->saved(function (Form $form) {
                if ($form->isCreating()) {
                    $user_password = session('password');
                    error_log("Password: " . $user_password);
                    error_log("Email: " . $form->email);


                    if ($user_password != null) {

                        if ($form->email != null) {
                            Mail::to($form->email)->send(new PwdCreated($form->email, $user_password));
                        } else {
                           if (! empty($form->next_of_kin_email)) {
                                Mail::to($form->next_of_kin_email)
                                    ->send(new MailNextOfKin(
                                        "{$form->name} {$form->other_names}", // full name
                                        $form->next_of_kin_email,            // guaranteed string
                                        session('password')                  // or $user_password
                                    ));
                            }
                        }
                    }
                }
            });
        }


        Admin::script(
            <<<EOT
            $(document).ready(function() {
                $('.btn-next').click(function() {
                    $('.nav-tabs > .active').next('li').find('a').trigger('click');
                });
                $('.btn-prev').click(function() {
                    $('.nav-tabs > .active').prev('li').find('a').trigger('click');
                });
            });
            EOT
        );

        //Ogiki Moses
        Admin::script(<<<'JS'
            $(function(){
                function updateIdLabel() {
                    var type = $('input[name="id_type"]:checked').val() || 'Identification Number';
                    $('label[for="id_number"]').text(type);
                }
                // on page load
                updateIdLabel();
                // whenever user picks a different ID Type
                $('input[name="id_type"]').on('change', updateIdLabel);
            });
        JS
        );



        


        return $form;
    }
}
